// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package datamodeltype

import (
	"fmt"
	"io"
	"math"
	"sort"

	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

var lengthBufPositionModel = []byte{130}

func (t *PositionModel) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write(lengthBufPositionModel); err != nil {
		return err
	}

	// t.Offset (uint64) (uint64)

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Offset)); err != nil {
		return err
	}

	// t.Length (uint64) (uint64)

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Length)); err != nil {
		return err
	}

	return nil
}

func (t *PositionModel) UnmarshalCBOR(r io.Reader) (err error) {
	*t = PositionModel{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Offset (uint64) (uint64)

	{

		maj, extra, err = cr.ReadHeader()
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.Offset = uint64(extra)

	}
	// t.Length (uint64) (uint64)

	{

		maj, extra, err = cr.ReadHeader()
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.Length = uint64(extra)

	}
	return nil
}

var lengthBufBlobSliceModel = []byte{130}

func (t *BlobSliceModel) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write(lengthBufBlobSliceModel); err != nil {
		return err
	}

	// t.Multihash ([]uint8) (slice)
	if len(t.Multihash) > 2097152 {
		return xerrors.Errorf("Byte array in field t.Multihash was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajByteString, uint64(len(t.Multihash))); err != nil {
		return err
	}

	if _, err := cw.Write(t.Multihash); err != nil {
		return err
	}

	// t.Position (datamodeltype.PositionModel) (struct)
	if err := t.Position.MarshalCBOR(cw); err != nil {
		return err
	}
	return nil
}

func (t *BlobSliceModel) UnmarshalCBOR(r io.Reader) (err error) {
	*t = BlobSliceModel{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Multihash ([]uint8) (slice)

	maj, extra, err = cr.ReadHeader()
	if err != nil {
		return err
	}

	if extra > 2097152 {
		return fmt.Errorf("t.Multihash: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return fmt.Errorf("expected byte array")
	}

	if extra > 0 {
		t.Multihash = make([]uint8, extra)
	}

	if _, err := io.ReadFull(cr, t.Multihash); err != nil {
		return err
	}

	// t.Position (datamodeltype.PositionModel) (struct)

	{

		if err := t.Position.UnmarshalCBOR(cr); err != nil {
			return xerrors.Errorf("unmarshaling t.Position: %w", err)
		}

	}
	return nil
}

var lengthBufBlobIndexModel = []byte{130}

func (t *BlobIndexModel) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write(lengthBufBlobIndexModel); err != nil {
		return err
	}

	// t.Multihash ([]uint8) (slice)
	if len(t.Multihash) > 2097152 {
		return xerrors.Errorf("Byte array in field t.Multihash was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajByteString, uint64(len(t.Multihash))); err != nil {
		return err
	}

	if _, err := cw.Write(t.Multihash); err != nil {
		return err
	}

	// t.Slices ([]datamodeltype.BlobSliceModel) (slice)
	if len(t.Slices) > 131072 {
		return xerrors.Errorf("Slice value in field t.Slices was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.Slices))); err != nil {
		return err
	}
	for _, v := range t.Slices {
		if err := v.MarshalCBOR(cw); err != nil {
			return err
		}

	}
	return nil
}

func (t *BlobIndexModel) UnmarshalCBOR(r io.Reader) (err error) {
	*t = BlobIndexModel{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Multihash ([]uint8) (slice)

	maj, extra, err = cr.ReadHeader()
	if err != nil {
		return err
	}

	if extra > 2097152 {
		return fmt.Errorf("t.Multihash: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return fmt.Errorf("expected byte array")
	}

	if extra > 0 {
		t.Multihash = make([]uint8, extra)
	}

	if _, err := io.ReadFull(cr, t.Multihash); err != nil {
		return err
	}

	// t.Slices ([]datamodeltype.BlobSliceModel) (slice)

	maj, extra, err = cr.ReadHeader()
	if err != nil {
		return err
	}

	if extra > 131072 {
		return fmt.Errorf("t.Slices: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.Slices = make([]BlobSliceModel, extra)
	}

	for i := 0; i < int(extra); i++ {
		{
			var maj byte
			var extra uint64
			var err error
			_ = maj
			_ = extra
			_ = err

			{

				if err := t.Slices[i].UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.Slices[i]: %w", err)
				}

			}

		}
	}
	return nil
}
