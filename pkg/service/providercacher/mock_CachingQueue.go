// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package providercacher

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockCachingQueue creates a new instance of MockCachingQueue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCachingQueue(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCachingQueue {
	mock := &MockCachingQueue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCachingQueue is an autogenerated mock type for the CachingQueue type
type MockCachingQueue struct {
	mock.Mock
}

type MockCachingQueue_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCachingQueue) EXPECT() *MockCachingQueue_Expecter {
	return &MockCachingQueue_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockCachingQueue
func (_mock *MockCachingQueue) Delete(ctx context.Context, jobID string) error {
	ret := _mock.Called(ctx, jobID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, jobID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCachingQueue_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockCachingQueue_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - jobID string
func (_e *MockCachingQueue_Expecter) Delete(ctx interface{}, jobID interface{}) *MockCachingQueue_Delete_Call {
	return &MockCachingQueue_Delete_Call{Call: _e.mock.On("Delete", ctx, jobID)}
}

func (_c *MockCachingQueue_Delete_Call) Run(run func(ctx context.Context, jobID string)) *MockCachingQueue_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCachingQueue_Delete_Call) Return(err error) *MockCachingQueue_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCachingQueue_Delete_Call) RunAndReturn(run func(ctx context.Context, jobID string) error) *MockCachingQueue_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Queue provides a mock function for the type MockCachingQueue
func (_mock *MockCachingQueue) Queue(ctx context.Context, job ProviderCachingJob) error {
	ret := _mock.Called(ctx, job)

	if len(ret) == 0 {
		panic("no return value specified for Queue")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ProviderCachingJob) error); ok {
		r0 = returnFunc(ctx, job)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCachingQueue_Queue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Queue'
type MockCachingQueue_Queue_Call struct {
	*mock.Call
}

// Queue is a helper method to define mock.On call
//   - ctx context.Context
//   - job ProviderCachingJob
func (_e *MockCachingQueue_Expecter) Queue(ctx interface{}, job interface{}) *MockCachingQueue_Queue_Call {
	return &MockCachingQueue_Queue_Call{Call: _e.mock.On("Queue", ctx, job)}
}

func (_c *MockCachingQueue_Queue_Call) Run(run func(ctx context.Context, job ProviderCachingJob)) *MockCachingQueue_Queue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 ProviderCachingJob
		if args[1] != nil {
			arg1 = args[1].(ProviderCachingJob)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCachingQueue_Queue_Call) Return(err error) *MockCachingQueue_Queue_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCachingQueue_Queue_Call) RunAndReturn(run func(ctx context.Context, job ProviderCachingJob) error) *MockCachingQueue_Queue_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function for the type MockCachingQueue
func (_mock *MockCachingQueue) Read(ctx context.Context, maxJobs int) ([]ProviderCachingJob, error) {
	ret := _mock.Called(ctx, maxJobs)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 []ProviderCachingJob
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) ([]ProviderCachingJob, error)); ok {
		return returnFunc(ctx, maxJobs)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) []ProviderCachingJob); ok {
		r0 = returnFunc(ctx, maxJobs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ProviderCachingJob)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, maxJobs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCachingQueue_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockCachingQueue_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - ctx context.Context
//   - maxJobs int
func (_e *MockCachingQueue_Expecter) Read(ctx interface{}, maxJobs interface{}) *MockCachingQueue_Read_Call {
	return &MockCachingQueue_Read_Call{Call: _e.mock.On("Read", ctx, maxJobs)}
}

func (_c *MockCachingQueue_Read_Call) Run(run func(ctx context.Context, maxJobs int)) *MockCachingQueue_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCachingQueue_Read_Call) Return(providerCachingJobs []ProviderCachingJob, err error) *MockCachingQueue_Read_Call {
	_c.Call.Return(providerCachingJobs, err)
	return _c
}

func (_c *MockCachingQueue_Read_Call) RunAndReturn(run func(ctx context.Context, maxJobs int) ([]ProviderCachingJob, error)) *MockCachingQueue_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Release provides a mock function for the type MockCachingQueue
func (_mock *MockCachingQueue) Release(ctx context.Context, jobID string) error {
	ret := _mock.Called(ctx, jobID)

	if len(ret) == 0 {
		panic("no return value specified for Release")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, jobID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCachingQueue_Release_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Release'
type MockCachingQueue_Release_Call struct {
	*mock.Call
}

// Release is a helper method to define mock.On call
//   - ctx context.Context
//   - jobID string
func (_e *MockCachingQueue_Expecter) Release(ctx interface{}, jobID interface{}) *MockCachingQueue_Release_Call {
	return &MockCachingQueue_Release_Call{Call: _e.mock.On("Release", ctx, jobID)}
}

func (_c *MockCachingQueue_Release_Call) Run(run func(ctx context.Context, jobID string)) *MockCachingQueue_Release_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCachingQueue_Release_Call) Return(err error) *MockCachingQueue_Release_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCachingQueue_Release_Call) RunAndReturn(run func(ctx context.Context, jobID string) error) *MockCachingQueue_Release_Call {
	_c.Call.Return(run)
	return _c
}
