// Code generated by mockery v2.53.3. DO NOT EDIT.

package providercacher

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockCachingQueue is an autogenerated mock type for the CachingQueue type
type MockCachingQueue struct {
	mock.Mock
}

type MockCachingQueue_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCachingQueue) EXPECT() *MockCachingQueue_Expecter {
	return &MockCachingQueue_Expecter{mock: &_m.Mock}
}

// DeleteJob provides a mock function with given fields: ctx, jobID
func (_m *MockCachingQueue) DeleteJob(ctx context.Context, jobID string) error {
	ret := _m.Called(ctx, jobID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteJob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, jobID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCachingQueue_DeleteJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteJob'
type MockCachingQueue_DeleteJob_Call struct {
	*mock.Call
}

// DeleteJob is a helper method to define mock.On call
//   - ctx context.Context
//   - jobID string
func (_e *MockCachingQueue_Expecter) DeleteJob(ctx interface{}, jobID interface{}) *MockCachingQueue_DeleteJob_Call {
	return &MockCachingQueue_DeleteJob_Call{Call: _e.mock.On("DeleteJob", ctx, jobID)}
}

func (_c *MockCachingQueue_DeleteJob_Call) Run(run func(ctx context.Context, jobID string)) *MockCachingQueue_DeleteJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCachingQueue_DeleteJob_Call) Return(_a0 error) *MockCachingQueue_DeleteJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCachingQueue_DeleteJob_Call) RunAndReturn(run func(context.Context, string) error) *MockCachingQueue_DeleteJob_Call {
	_c.Call.Return(run)
	return _c
}

// Queue provides a mock function with given fields: ctx, job
func (_m *MockCachingQueue) Queue(ctx context.Context, job ProviderCachingJob) error {
	ret := _m.Called(ctx, job)

	if len(ret) == 0 {
		panic("no return value specified for Queue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ProviderCachingJob) error); ok {
		r0 = rf(ctx, job)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCachingQueue_Queue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Queue'
type MockCachingQueue_Queue_Call struct {
	*mock.Call
}

// Queue is a helper method to define mock.On call
//   - ctx context.Context
//   - job ProviderCachingJob
func (_e *MockCachingQueue_Expecter) Queue(ctx interface{}, job interface{}) *MockCachingQueue_Queue_Call {
	return &MockCachingQueue_Queue_Call{Call: _e.mock.On("Queue", ctx, job)}
}

func (_c *MockCachingQueue_Queue_Call) Run(run func(ctx context.Context, job ProviderCachingJob)) *MockCachingQueue_Queue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ProviderCachingJob))
	})
	return _c
}

func (_c *MockCachingQueue_Queue_Call) Return(_a0 error) *MockCachingQueue_Queue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCachingQueue_Queue_Call) RunAndReturn(run func(context.Context, ProviderCachingJob) error) *MockCachingQueue_Queue_Call {
	_c.Call.Return(run)
	return _c
}

// ReadJobs provides a mock function with given fields: ctx, maxJobs
func (_m *MockCachingQueue) ReadJobs(ctx context.Context, maxJobs int) ([]ProviderCachingJob, error) {
	ret := _m.Called(ctx, maxJobs)

	if len(ret) == 0 {
		panic("no return value specified for ReadJobs")
	}

	var r0 []ProviderCachingJob
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]ProviderCachingJob, error)); ok {
		return rf(ctx, maxJobs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []ProviderCachingJob); ok {
		r0 = rf(ctx, maxJobs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ProviderCachingJob)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, maxJobs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCachingQueue_ReadJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadJobs'
type MockCachingQueue_ReadJobs_Call struct {
	*mock.Call
}

// ReadJobs is a helper method to define mock.On call
//   - ctx context.Context
//   - maxJobs int
func (_e *MockCachingQueue_Expecter) ReadJobs(ctx interface{}, maxJobs interface{}) *MockCachingQueue_ReadJobs_Call {
	return &MockCachingQueue_ReadJobs_Call{Call: _e.mock.On("ReadJobs", ctx, maxJobs)}
}

func (_c *MockCachingQueue_ReadJobs_Call) Run(run func(ctx context.Context, maxJobs int)) *MockCachingQueue_ReadJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockCachingQueue_ReadJobs_Call) Return(_a0 []ProviderCachingJob, _a1 error) *MockCachingQueue_ReadJobs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCachingQueue_ReadJobs_Call) RunAndReturn(run func(context.Context, int) ([]ProviderCachingJob, error)) *MockCachingQueue_ReadJobs_Call {
	_c.Call.Return(run)
	return _c
}

// Release provides a mock function with given fields: ctx, jobID
func (_m *MockCachingQueue) Release(ctx context.Context, jobID string) error {
	ret := _m.Called(ctx, jobID)

	if len(ret) == 0 {
		panic("no return value specified for Release")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, jobID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCachingQueue_Release_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Release'
type MockCachingQueue_Release_Call struct {
	*mock.Call
}

// Release is a helper method to define mock.On call
//   - ctx context.Context
//   - jobID string
func (_e *MockCachingQueue_Expecter) Release(ctx interface{}, jobID interface{}) *MockCachingQueue_Release_Call {
	return &MockCachingQueue_Release_Call{Call: _e.mock.On("Release", ctx, jobID)}
}

func (_c *MockCachingQueue_Release_Call) Run(run func(ctx context.Context, jobID string)) *MockCachingQueue_Release_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCachingQueue_Release_Call) Return(_a0 error) *MockCachingQueue_Release_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCachingQueue_Release_Call) RunAndReturn(run func(context.Context, string) error) *MockCachingQueue_Release_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCachingQueue creates a new instance of MockCachingQueue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCachingQueue(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCachingQueue {
	mock := &MockCachingQueue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
