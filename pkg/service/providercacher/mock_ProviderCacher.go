// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package providercacher

import (
	"context"

	"github.com/ipni/go-libipni/find/model"
	"github.com/storacha/go-libstoracha/blobindex"
	mock "github.com/stretchr/testify/mock"
)

// NewMockProviderCacher creates a new instance of MockProviderCacher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProviderCacher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProviderCacher {
	mock := &MockProviderCacher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProviderCacher is an autogenerated mock type for the ProviderCacher type
type MockProviderCacher struct {
	mock.Mock
}

type MockProviderCacher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProviderCacher) EXPECT() *MockProviderCacher_Expecter {
	return &MockProviderCacher_Expecter{mock: &_m.Mock}
}

// CacheProviderForIndexRecords provides a mock function for the type MockProviderCacher
func (_mock *MockProviderCacher) CacheProviderForIndexRecords(ctx context.Context, provider model.ProviderResult, index blobindex.ShardedDagIndexView) error {
	ret := _mock.Called(ctx, provider, index)

	if len(ret) == 0 {
		panic("no return value specified for CacheProviderForIndexRecords")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.ProviderResult, blobindex.ShardedDagIndexView) error); ok {
		r0 = returnFunc(ctx, provider, index)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProviderCacher_CacheProviderForIndexRecords_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CacheProviderForIndexRecords'
type MockProviderCacher_CacheProviderForIndexRecords_Call struct {
	*mock.Call
}

// CacheProviderForIndexRecords is a helper method to define mock.On call
//   - ctx context.Context
//   - provider model.ProviderResult
//   - index blobindex.ShardedDagIndexView
func (_e *MockProviderCacher_Expecter) CacheProviderForIndexRecords(ctx interface{}, provider interface{}, index interface{}) *MockProviderCacher_CacheProviderForIndexRecords_Call {
	return &MockProviderCacher_CacheProviderForIndexRecords_Call{Call: _e.mock.On("CacheProviderForIndexRecords", ctx, provider, index)}
}

func (_c *MockProviderCacher_CacheProviderForIndexRecords_Call) Run(run func(ctx context.Context, provider model.ProviderResult, index blobindex.ShardedDagIndexView)) *MockProviderCacher_CacheProviderForIndexRecords_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.ProviderResult
		if args[1] != nil {
			arg1 = args[1].(model.ProviderResult)
		}
		var arg2 blobindex.ShardedDagIndexView
		if args[2] != nil {
			arg2 = args[2].(blobindex.ShardedDagIndexView)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockProviderCacher_CacheProviderForIndexRecords_Call) Return(err error) *MockProviderCacher_CacheProviderForIndexRecords_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProviderCacher_CacheProviderForIndexRecords_Call) RunAndReturn(run func(ctx context.Context, provider model.ProviderResult, index blobindex.ShardedDagIndexView) error) *MockProviderCacher_CacheProviderForIndexRecords_Call {
	_c.Call.Return(run)
	return _c
}
