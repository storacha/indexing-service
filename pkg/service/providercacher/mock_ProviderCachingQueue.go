// Code generated by mockery v2.53.3. DO NOT EDIT.

package providercacher

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockProviderCachingQueue is an autogenerated mock type for the ProviderCachingQueue type
type MockProviderCachingQueue struct {
	mock.Mock
}

type MockProviderCachingQueue_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProviderCachingQueue) EXPECT() *MockProviderCachingQueue_Expecter {
	return &MockProviderCachingQueue_Expecter{mock: &_m.Mock}
}

// Queue provides a mock function with given fields: ctx, message
func (_m *MockProviderCachingQueue) Queue(ctx context.Context, message CacheProviderMessage) error {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for Queue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, CacheProviderMessage) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProviderCachingQueue_Queue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Queue'
type MockProviderCachingQueue_Queue_Call struct {
	*mock.Call
}

// Queue is a helper method to define mock.On call
//   - ctx context.Context
//   - message CacheProviderMessage
func (_e *MockProviderCachingQueue_Expecter) Queue(ctx interface{}, message interface{}) *MockProviderCachingQueue_Queue_Call {
	return &MockProviderCachingQueue_Queue_Call{Call: _e.mock.On("Queue", ctx, message)}
}

func (_c *MockProviderCachingQueue_Queue_Call) Run(run func(ctx context.Context, message CacheProviderMessage)) *MockProviderCachingQueue_Queue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CacheProviderMessage))
	})
	return _c
}

func (_c *MockProviderCachingQueue_Queue_Call) Return(_a0 error) *MockProviderCachingQueue_Queue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProviderCachingQueue_Queue_Call) RunAndReturn(run func(context.Context, CacheProviderMessage) error) *MockProviderCachingQueue_Queue_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProviderCachingQueue creates a new instance of MockProviderCachingQueue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProviderCachingQueue(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProviderCachingQueue {
	mock := &MockProviderCachingQueue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
