// Code generated by mockery v2.51.1. DO NOT EDIT.

package contentclaims

import (
	context "context"

	ipld "github.com/ipld/go-ipld-prime"
	delegation "github.com/storacha/go-ucanto/core/delegation"

	mock "github.com/stretchr/testify/mock"

	url "net/url"
)

// MockContentClaimsFinder is an autogenerated mock type for the Finder type
type MockContentClaimsFinder struct {
	mock.Mock
}

type MockContentClaimsFinder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockContentClaimsFinder) EXPECT() *MockContentClaimsFinder_Expecter {
	return &MockContentClaimsFinder_Expecter{mock: &_m.Mock}
}

// Find provides a mock function with given fields: ctx, claim, fetchURL
func (_m *MockContentClaimsFinder) Find(ctx context.Context, claim ipld.Link, fetchURL *url.URL) (delegation.Delegation, error) {
	ret := _m.Called(ctx, claim, fetchURL)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 delegation.Delegation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ipld.Link, *url.URL) (delegation.Delegation, error)); ok {
		return rf(ctx, claim, fetchURL)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ipld.Link, *url.URL) delegation.Delegation); ok {
		r0 = rf(ctx, claim, fetchURL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(delegation.Delegation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ipld.Link, *url.URL) error); ok {
		r1 = rf(ctx, claim, fetchURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContentClaimsFinder_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockContentClaimsFinder_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - claim ipld.Link
//   - fetchURL *url.URL
func (_e *MockContentClaimsFinder_Expecter) Find(ctx interface{}, claim interface{}, fetchURL interface{}) *MockContentClaimsFinder_Find_Call {
	return &MockContentClaimsFinder_Find_Call{Call: _e.mock.On("Find", ctx, claim, fetchURL)}
}

func (_c *MockContentClaimsFinder_Find_Call) Run(run func(ctx context.Context, claim ipld.Link, fetchURL *url.URL)) *MockContentClaimsFinder_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ipld.Link), args[2].(*url.URL))
	})
	return _c
}

func (_c *MockContentClaimsFinder_Find_Call) Return(_a0 delegation.Delegation, _a1 error) *MockContentClaimsFinder_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContentClaimsFinder_Find_Call) RunAndReturn(run func(context.Context, ipld.Link, *url.URL) (delegation.Delegation, error)) *MockContentClaimsFinder_Find_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockContentClaimsFinder creates a new instance of MockContentClaimsFinder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockContentClaimsFinder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockContentClaimsFinder {
	mock := &MockContentClaimsFinder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
