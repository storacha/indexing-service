// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package contentclaims

import (
	"context"
	"net/url"

	"github.com/ipld/go-ipld-prime"
	"github.com/storacha/go-ucanto/core/delegation"
	mock "github.com/stretchr/testify/mock"
)

// NewMockContentClaimsService creates a new instance of MockContentClaimsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockContentClaimsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockContentClaimsService {
	mock := &MockContentClaimsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockContentClaimsService is an autogenerated mock type for the Service type
type MockContentClaimsService struct {
	mock.Mock
}

type MockContentClaimsService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockContentClaimsService) EXPECT() *MockContentClaimsService_Expecter {
	return &MockContentClaimsService_Expecter{mock: &_m.Mock}
}

// Cache provides a mock function for the type MockContentClaimsService
func (_mock *MockContentClaimsService) Cache(ctx context.Context, claim delegation.Delegation) error {
	ret := _mock.Called(ctx, claim)

	if len(ret) == 0 {
		panic("no return value specified for Cache")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, delegation.Delegation) error); ok {
		r0 = returnFunc(ctx, claim)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockContentClaimsService_Cache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cache'
type MockContentClaimsService_Cache_Call struct {
	*mock.Call
}

// Cache is a helper method to define mock.On call
//   - ctx context.Context
//   - claim delegation.Delegation
func (_e *MockContentClaimsService_Expecter) Cache(ctx interface{}, claim interface{}) *MockContentClaimsService_Cache_Call {
	return &MockContentClaimsService_Cache_Call{Call: _e.mock.On("Cache", ctx, claim)}
}

func (_c *MockContentClaimsService_Cache_Call) Run(run func(ctx context.Context, claim delegation.Delegation)) *MockContentClaimsService_Cache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 delegation.Delegation
		if args[1] != nil {
			arg1 = args[1].(delegation.Delegation)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockContentClaimsService_Cache_Call) Return(err error) *MockContentClaimsService_Cache_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockContentClaimsService_Cache_Call) RunAndReturn(run func(ctx context.Context, claim delegation.Delegation) error) *MockContentClaimsService_Cache_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function for the type MockContentClaimsService
func (_mock *MockContentClaimsService) Find(ctx context.Context, claim ipld.Link, fetchURL *url.URL) (delegation.Delegation, error) {
	ret := _mock.Called(ctx, claim, fetchURL)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 delegation.Delegation
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ipld.Link, *url.URL) (delegation.Delegation, error)); ok {
		return returnFunc(ctx, claim, fetchURL)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ipld.Link, *url.URL) delegation.Delegation); ok {
		r0 = returnFunc(ctx, claim, fetchURL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(delegation.Delegation)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ipld.Link, *url.URL) error); ok {
		r1 = returnFunc(ctx, claim, fetchURL)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockContentClaimsService_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockContentClaimsService_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - claim ipld.Link
//   - fetchURL *url.URL
func (_e *MockContentClaimsService_Expecter) Find(ctx interface{}, claim interface{}, fetchURL interface{}) *MockContentClaimsService_Find_Call {
	return &MockContentClaimsService_Find_Call{Call: _e.mock.On("Find", ctx, claim, fetchURL)}
}

func (_c *MockContentClaimsService_Find_Call) Run(run func(ctx context.Context, claim ipld.Link, fetchURL *url.URL)) *MockContentClaimsService_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 ipld.Link
		if args[1] != nil {
			arg1 = args[1].(ipld.Link)
		}
		var arg2 *url.URL
		if args[2] != nil {
			arg2 = args[2].(*url.URL)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockContentClaimsService_Find_Call) Return(delegation1 delegation.Delegation, err error) *MockContentClaimsService_Find_Call {
	_c.Call.Return(delegation1, err)
	return _c
}

func (_c *MockContentClaimsService_Find_Call) RunAndReturn(run func(ctx context.Context, claim ipld.Link, fetchURL *url.URL) (delegation.Delegation, error)) *MockContentClaimsService_Find_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockContentClaimsService
func (_mock *MockContentClaimsService) Get(ctx context.Context, claim ipld.Link) (delegation.Delegation, error) {
	ret := _mock.Called(ctx, claim)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 delegation.Delegation
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ipld.Link) (delegation.Delegation, error)); ok {
		return returnFunc(ctx, claim)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ipld.Link) delegation.Delegation); ok {
		r0 = returnFunc(ctx, claim)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(delegation.Delegation)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ipld.Link) error); ok {
		r1 = returnFunc(ctx, claim)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockContentClaimsService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockContentClaimsService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - claim ipld.Link
func (_e *MockContentClaimsService_Expecter) Get(ctx interface{}, claim interface{}) *MockContentClaimsService_Get_Call {
	return &MockContentClaimsService_Get_Call{Call: _e.mock.On("Get", ctx, claim)}
}

func (_c *MockContentClaimsService_Get_Call) Run(run func(ctx context.Context, claim ipld.Link)) *MockContentClaimsService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 ipld.Link
		if args[1] != nil {
			arg1 = args[1].(ipld.Link)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockContentClaimsService_Get_Call) Return(delegation1 delegation.Delegation, err error) *MockContentClaimsService_Get_Call {
	_c.Call.Return(delegation1, err)
	return _c
}

func (_c *MockContentClaimsService_Get_Call) RunAndReturn(run func(ctx context.Context, claim ipld.Link) (delegation.Delegation, error)) *MockContentClaimsService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function for the type MockContentClaimsService
func (_mock *MockContentClaimsService) Publish(ctx context.Context, claim delegation.Delegation) error {
	ret := _mock.Called(ctx, claim)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, delegation.Delegation) error); ok {
		r0 = returnFunc(ctx, claim)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockContentClaimsService_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockContentClaimsService_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - claim delegation.Delegation
func (_e *MockContentClaimsService_Expecter) Publish(ctx interface{}, claim interface{}) *MockContentClaimsService_Publish_Call {
	return &MockContentClaimsService_Publish_Call{Call: _e.mock.On("Publish", ctx, claim)}
}

func (_c *MockContentClaimsService_Publish_Call) Run(run func(ctx context.Context, claim delegation.Delegation)) *MockContentClaimsService_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 delegation.Delegation
		if args[1] != nil {
			arg1 = args[1].(delegation.Delegation)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockContentClaimsService_Publish_Call) Return(err error) *MockContentClaimsService_Publish_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockContentClaimsService_Publish_Call) RunAndReturn(run func(ctx context.Context, claim delegation.Delegation) error) *MockContentClaimsService_Publish_Call {
	_c.Call.Return(run)
	return _c
}
