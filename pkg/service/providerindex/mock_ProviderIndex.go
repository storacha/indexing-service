// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package providerindex

import (
	"context"
	"iter"

	"github.com/ipni/go-libipni/find/model"
	"github.com/ipni/go-libipni/metadata"
	"github.com/libp2p/go-libp2p/core/peer"
	"github.com/multiformats/go-multihash"
	mock "github.com/stretchr/testify/mock"
)

// NewMockProviderIndex creates a new instance of MockProviderIndex. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProviderIndex(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProviderIndex {
	mock := &MockProviderIndex{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProviderIndex is an autogenerated mock type for the ProviderIndex type
type MockProviderIndex struct {
	mock.Mock
}

type MockProviderIndex_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProviderIndex) EXPECT() *MockProviderIndex_Expecter {
	return &MockProviderIndex_Expecter{mock: &_m.Mock}
}

// Cache provides a mock function for the type MockProviderIndex
func (_mock *MockProviderIndex) Cache(ctx context.Context, provider peer.AddrInfo, contextID string, digests iter.Seq[multihash.Multihash], meta metadata.Metadata) error {
	ret := _mock.Called(ctx, provider, contextID, digests, meta)

	if len(ret) == 0 {
		panic("no return value specified for Cache")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, peer.AddrInfo, string, iter.Seq[multihash.Multihash], metadata.Metadata) error); ok {
		r0 = returnFunc(ctx, provider, contextID, digests, meta)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProviderIndex_Cache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cache'
type MockProviderIndex_Cache_Call struct {
	*mock.Call
}

// Cache is a helper method to define mock.On call
//   - ctx context.Context
//   - provider peer.AddrInfo
//   - contextID string
//   - digests iter.Seq[multihash.Multihash]
//   - meta metadata.Metadata
func (_e *MockProviderIndex_Expecter) Cache(ctx interface{}, provider interface{}, contextID interface{}, digests interface{}, meta interface{}) *MockProviderIndex_Cache_Call {
	return &MockProviderIndex_Cache_Call{Call: _e.mock.On("Cache", ctx, provider, contextID, digests, meta)}
}

func (_c *MockProviderIndex_Cache_Call) Run(run func(ctx context.Context, provider peer.AddrInfo, contextID string, digests iter.Seq[multihash.Multihash], meta metadata.Metadata)) *MockProviderIndex_Cache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 peer.AddrInfo
		if args[1] != nil {
			arg1 = args[1].(peer.AddrInfo)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 iter.Seq[multihash.Multihash]
		if args[3] != nil {
			arg3 = args[3].(iter.Seq[multihash.Multihash])
		}
		var arg4 metadata.Metadata
		if args[4] != nil {
			arg4 = args[4].(metadata.Metadata)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockProviderIndex_Cache_Call) Return(err error) *MockProviderIndex_Cache_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProviderIndex_Cache_Call) RunAndReturn(run func(ctx context.Context, provider peer.AddrInfo, contextID string, digests iter.Seq[multihash.Multihash], meta metadata.Metadata) error) *MockProviderIndex_Cache_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function for the type MockProviderIndex
func (_mock *MockProviderIndex) Find(context1 context.Context, queryKey QueryKey) ([]model.ProviderResult, error) {
	ret := _mock.Called(context1, queryKey)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 []model.ProviderResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, QueryKey) ([]model.ProviderResult, error)); ok {
		return returnFunc(context1, queryKey)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, QueryKey) []model.ProviderResult); ok {
		r0 = returnFunc(context1, queryKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ProviderResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, QueryKey) error); ok {
		r1 = returnFunc(context1, queryKey)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProviderIndex_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockProviderIndex_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - context1 context.Context
//   - queryKey QueryKey
func (_e *MockProviderIndex_Expecter) Find(context1 interface{}, queryKey interface{}) *MockProviderIndex_Find_Call {
	return &MockProviderIndex_Find_Call{Call: _e.mock.On("Find", context1, queryKey)}
}

func (_c *MockProviderIndex_Find_Call) Run(run func(context1 context.Context, queryKey QueryKey)) *MockProviderIndex_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 QueryKey
		if args[1] != nil {
			arg1 = args[1].(QueryKey)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProviderIndex_Find_Call) Return(providerResults []model.ProviderResult, err error) *MockProviderIndex_Find_Call {
	_c.Call.Return(providerResults, err)
	return _c
}

func (_c *MockProviderIndex_Find_Call) RunAndReturn(run func(context1 context.Context, queryKey QueryKey) ([]model.ProviderResult, error)) *MockProviderIndex_Find_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function for the type MockProviderIndex
func (_mock *MockProviderIndex) Publish(ctx context.Context, provider peer.AddrInfo, contextID string, digests iter.Seq[multihash.Multihash], meta metadata.Metadata) error {
	ret := _mock.Called(ctx, provider, contextID, digests, meta)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, peer.AddrInfo, string, iter.Seq[multihash.Multihash], metadata.Metadata) error); ok {
		r0 = returnFunc(ctx, provider, contextID, digests, meta)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProviderIndex_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockProviderIndex_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - provider peer.AddrInfo
//   - contextID string
//   - digests iter.Seq[multihash.Multihash]
//   - meta metadata.Metadata
func (_e *MockProviderIndex_Expecter) Publish(ctx interface{}, provider interface{}, contextID interface{}, digests interface{}, meta interface{}) *MockProviderIndex_Publish_Call {
	return &MockProviderIndex_Publish_Call{Call: _e.mock.On("Publish", ctx, provider, contextID, digests, meta)}
}

func (_c *MockProviderIndex_Publish_Call) Run(run func(ctx context.Context, provider peer.AddrInfo, contextID string, digests iter.Seq[multihash.Multihash], meta metadata.Metadata)) *MockProviderIndex_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 peer.AddrInfo
		if args[1] != nil {
			arg1 = args[1].(peer.AddrInfo)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 iter.Seq[multihash.Multihash]
		if args[3] != nil {
			arg3 = args[3].(iter.Seq[multihash.Multihash])
		}
		var arg4 metadata.Metadata
		if args[4] != nil {
			arg4 = args[4].(metadata.Metadata)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockProviderIndex_Publish_Call) Return(err error) *MockProviderIndex_Publish_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProviderIndex_Publish_Call) RunAndReturn(run func(ctx context.Context, provider peer.AddrInfo, contextID string, digests iter.Seq[multihash.Multihash], meta metadata.Metadata) error) *MockProviderIndex_Publish_Call {
	_c.Call.Return(run)
	return _c
}
