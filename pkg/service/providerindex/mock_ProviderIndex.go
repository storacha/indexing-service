// Code generated by mockery v2.53.3. DO NOT EDIT.

package providerindex

import (
	context "context"
	iter "iter"

	metadata "github.com/ipni/go-libipni/metadata"

	mock "github.com/stretchr/testify/mock"

	model "github.com/ipni/go-libipni/find/model"

	multihash "github.com/multiformats/go-multihash"

	peer "github.com/libp2p/go-libp2p/core/peer"
)

// MockProviderIndex is an autogenerated mock type for the ProviderIndex type
type MockProviderIndex struct {
	mock.Mock
}

type MockProviderIndex_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProviderIndex) EXPECT() *MockProviderIndex_Expecter {
	return &MockProviderIndex_Expecter{mock: &_m.Mock}
}

// Cache provides a mock function with given fields: ctx, provider, contextID, digests, meta, expire
func (_m *MockProviderIndex) Cache(ctx context.Context, provider peer.AddrInfo, contextID string, digests iter.Seq[multihash.Multihash], meta metadata.Metadata, expire bool) error {
	ret := _m.Called(ctx, provider, contextID, digests, meta, expire)

	if len(ret) == 0 {
		panic("no return value specified for Cache")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, peer.AddrInfo, string, iter.Seq[multihash.Multihash], metadata.Metadata, bool) error); ok {
		r0 = rf(ctx, provider, contextID, digests, meta, expire)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProviderIndex_Cache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cache'
type MockProviderIndex_Cache_Call struct {
	*mock.Call
}

// Cache is a helper method to define mock.On call
//   - ctx context.Context
//   - provider peer.AddrInfo
//   - contextID string
//   - digests iter.Seq[multihash.Multihash]
//   - meta metadata.Metadata
//   - expire bool
func (_e *MockProviderIndex_Expecter) Cache(ctx interface{}, provider interface{}, contextID interface{}, digests interface{}, meta interface{}, expire interface{}) *MockProviderIndex_Cache_Call {
	return &MockProviderIndex_Cache_Call{Call: _e.mock.On("Cache", ctx, provider, contextID, digests, meta, expire)}
}

func (_c *MockProviderIndex_Cache_Call) Run(run func(ctx context.Context, provider peer.AddrInfo, contextID string, digests iter.Seq[multihash.Multihash], meta metadata.Metadata, expire bool)) *MockProviderIndex_Cache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(peer.AddrInfo), args[2].(string), args[3].(iter.Seq[multihash.Multihash]), args[4].(metadata.Metadata), args[5].(bool))
	})
	return _c
}

func (_c *MockProviderIndex_Cache_Call) Return(_a0 error) *MockProviderIndex_Cache_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProviderIndex_Cache_Call) RunAndReturn(run func(context.Context, peer.AddrInfo, string, iter.Seq[multihash.Multihash], metadata.Metadata, bool) error) *MockProviderIndex_Cache_Call {
	_c.Call.Return(run)
	return _c
}

// CacheAsync provides a mock function with given fields: ctx, provider, contextID, digests, meta
func (_m *MockProviderIndex) CacheAsync(ctx context.Context, provider peer.AddrInfo, contextID string, digests iter.Seq[multihash.Multihash], meta metadata.Metadata) error {
	ret := _m.Called(ctx, provider, contextID, digests, meta)

	if len(ret) == 0 {
		panic("no return value specified for CacheAsync")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, peer.AddrInfo, string, iter.Seq[multihash.Multihash], metadata.Metadata) error); ok {
		r0 = rf(ctx, provider, contextID, digests, meta)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProviderIndex_CacheAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CacheAsync'
type MockProviderIndex_CacheAsync_Call struct {
	*mock.Call
}

// CacheAsync is a helper method to define mock.On call
//   - ctx context.Context
//   - provider peer.AddrInfo
//   - contextID string
//   - digests iter.Seq[multihash.Multihash]
//   - meta metadata.Metadata
func (_e *MockProviderIndex_Expecter) CacheAsync(ctx interface{}, provider interface{}, contextID interface{}, digests interface{}, meta interface{}) *MockProviderIndex_CacheAsync_Call {
	return &MockProviderIndex_CacheAsync_Call{Call: _e.mock.On("CacheAsync", ctx, provider, contextID, digests, meta)}
}

func (_c *MockProviderIndex_CacheAsync_Call) Run(run func(ctx context.Context, provider peer.AddrInfo, contextID string, digests iter.Seq[multihash.Multihash], meta metadata.Metadata)) *MockProviderIndex_CacheAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(peer.AddrInfo), args[2].(string), args[3].(iter.Seq[multihash.Multihash]), args[4].(metadata.Metadata))
	})
	return _c
}

func (_c *MockProviderIndex_CacheAsync_Call) Return(_a0 error) *MockProviderIndex_CacheAsync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProviderIndex_CacheAsync_Call) RunAndReturn(run func(context.Context, peer.AddrInfo, string, iter.Seq[multihash.Multihash], metadata.Metadata) error) *MockProviderIndex_CacheAsync_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: _a0, _a1
func (_m *MockProviderIndex) Find(_a0 context.Context, _a1 QueryKey) ([]model.ProviderResult, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 []model.ProviderResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, QueryKey) ([]model.ProviderResult, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, QueryKey) []model.ProviderResult); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ProviderResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, QueryKey) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderIndex_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockProviderIndex_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 QueryKey
func (_e *MockProviderIndex_Expecter) Find(_a0 interface{}, _a1 interface{}) *MockProviderIndex_Find_Call {
	return &MockProviderIndex_Find_Call{Call: _e.mock.On("Find", _a0, _a1)}
}

func (_c *MockProviderIndex_Find_Call) Run(run func(_a0 context.Context, _a1 QueryKey)) *MockProviderIndex_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(QueryKey))
	})
	return _c
}

func (_c *MockProviderIndex_Find_Call) Return(_a0 []model.ProviderResult, _a1 error) *MockProviderIndex_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderIndex_Find_Call) RunAndReturn(run func(context.Context, QueryKey) ([]model.ProviderResult, error)) *MockProviderIndex_Find_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: ctx, provider, contextID, digests, meta
func (_m *MockProviderIndex) Publish(ctx context.Context, provider peer.AddrInfo, contextID string, digests iter.Seq[multihash.Multihash], meta metadata.Metadata) error {
	ret := _m.Called(ctx, provider, contextID, digests, meta)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, peer.AddrInfo, string, iter.Seq[multihash.Multihash], metadata.Metadata) error); ok {
		r0 = rf(ctx, provider, contextID, digests, meta)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProviderIndex_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockProviderIndex_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - provider peer.AddrInfo
//   - contextID string
//   - digests iter.Seq[multihash.Multihash]
//   - meta metadata.Metadata
func (_e *MockProviderIndex_Expecter) Publish(ctx interface{}, provider interface{}, contextID interface{}, digests interface{}, meta interface{}) *MockProviderIndex_Publish_Call {
	return &MockProviderIndex_Publish_Call{Call: _e.mock.On("Publish", ctx, provider, contextID, digests, meta)}
}

func (_c *MockProviderIndex_Publish_Call) Run(run func(ctx context.Context, provider peer.AddrInfo, contextID string, digests iter.Seq[multihash.Multihash], meta metadata.Metadata)) *MockProviderIndex_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(peer.AddrInfo), args[2].(string), args[3].(iter.Seq[multihash.Multihash]), args[4].(metadata.Metadata))
	})
	return _c
}

func (_c *MockProviderIndex_Publish_Call) Return(_a0 error) *MockProviderIndex_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProviderIndex_Publish_Call) RunAndReturn(run func(context.Context, peer.AddrInfo, string, iter.Seq[multihash.Multihash], metadata.Metadata) error) *MockProviderIndex_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProviderIndex creates a new instance of MockProviderIndex. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProviderIndex(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProviderIndex {
	mock := &MockProviderIndex{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
