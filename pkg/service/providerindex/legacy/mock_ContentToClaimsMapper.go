// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package legacy

import (
	"context"

	"github.com/ipfs/go-cid"
	"github.com/multiformats/go-multihash"
	mock "github.com/stretchr/testify/mock"
)

// NewMockContentToClaimsMapper creates a new instance of MockContentToClaimsMapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockContentToClaimsMapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockContentToClaimsMapper {
	mock := &MockContentToClaimsMapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockContentToClaimsMapper is an autogenerated mock type for the ContentToClaimsMapper type
type MockContentToClaimsMapper struct {
	mock.Mock
}

type MockContentToClaimsMapper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockContentToClaimsMapper) EXPECT() *MockContentToClaimsMapper_Expecter {
	return &MockContentToClaimsMapper_Expecter{mock: &_m.Mock}
}

// GetClaims provides a mock function for the type MockContentToClaimsMapper
func (_mock *MockContentToClaimsMapper) GetClaims(ctx context.Context, contentHash multihash.Multihash) ([]cid.Cid, error) {
	ret := _mock.Called(ctx, contentHash)

	if len(ret) == 0 {
		panic("no return value specified for GetClaims")
	}

	var r0 []cid.Cid
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, multihash.Multihash) ([]cid.Cid, error)); ok {
		return returnFunc(ctx, contentHash)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, multihash.Multihash) []cid.Cid); ok {
		r0 = returnFunc(ctx, contentHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cid.Cid)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, multihash.Multihash) error); ok {
		r1 = returnFunc(ctx, contentHash)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockContentToClaimsMapper_GetClaims_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClaims'
type MockContentToClaimsMapper_GetClaims_Call struct {
	*mock.Call
}

// GetClaims is a helper method to define mock.On call
//   - ctx context.Context
//   - contentHash multihash.Multihash
func (_e *MockContentToClaimsMapper_Expecter) GetClaims(ctx interface{}, contentHash interface{}) *MockContentToClaimsMapper_GetClaims_Call {
	return &MockContentToClaimsMapper_GetClaims_Call{Call: _e.mock.On("GetClaims", ctx, contentHash)}
}

func (_c *MockContentToClaimsMapper_GetClaims_Call) Run(run func(ctx context.Context, contentHash multihash.Multihash)) *MockContentToClaimsMapper_GetClaims_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 multihash.Multihash
		if args[1] != nil {
			arg1 = args[1].(multihash.Multihash)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockContentToClaimsMapper_GetClaims_Call) Return(claimsCids []cid.Cid, err error) *MockContentToClaimsMapper_GetClaims_Call {
	_c.Call.Return(claimsCids, err)
	return _c
}

func (_c *MockContentToClaimsMapper_GetClaims_Call) RunAndReturn(run func(ctx context.Context, contentHash multihash.Multihash) ([]cid.Cid, error)) *MockContentToClaimsMapper_GetClaims_Call {
	_c.Call.Return(run)
	return _c
}
