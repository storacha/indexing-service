// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package blobindexlookup

import (
	"context"

	"github.com/ipni/go-libipni/find/model"
	"github.com/storacha/go-libstoracha/blobindex"
	"github.com/storacha/indexing-service/pkg/types"
	mock "github.com/stretchr/testify/mock"
)

// NewMockBlobIndexLookup creates a new instance of MockBlobIndexLookup. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlobIndexLookup(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlobIndexLookup {
	mock := &MockBlobIndexLookup{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBlobIndexLookup is an autogenerated mock type for the BlobIndexLookup type
type MockBlobIndexLookup struct {
	mock.Mock
}

type MockBlobIndexLookup_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlobIndexLookup) EXPECT() *MockBlobIndexLookup_Expecter {
	return &MockBlobIndexLookup_Expecter{mock: &_m.Mock}
}

// Find provides a mock function for the type MockBlobIndexLookup
func (_mock *MockBlobIndexLookup) Find(ctx context.Context, contextID types.EncodedContextID, provider model.ProviderResult, req types.RetrievalRequest) (blobindex.ShardedDagIndexView, error) {
	ret := _mock.Called(ctx, contextID, provider, req)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 blobindex.ShardedDagIndexView
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.EncodedContextID, model.ProviderResult, types.RetrievalRequest) (blobindex.ShardedDagIndexView, error)); ok {
		return returnFunc(ctx, contextID, provider, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.EncodedContextID, model.ProviderResult, types.RetrievalRequest) blobindex.ShardedDagIndexView); ok {
		r0 = returnFunc(ctx, contextID, provider, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(blobindex.ShardedDagIndexView)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.EncodedContextID, model.ProviderResult, types.RetrievalRequest) error); ok {
		r1 = returnFunc(ctx, contextID, provider, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBlobIndexLookup_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockBlobIndexLookup_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - contextID types.EncodedContextID
//   - provider model.ProviderResult
//   - req types.RetrievalRequest
func (_e *MockBlobIndexLookup_Expecter) Find(ctx interface{}, contextID interface{}, provider interface{}, req interface{}) *MockBlobIndexLookup_Find_Call {
	return &MockBlobIndexLookup_Find_Call{Call: _e.mock.On("Find", ctx, contextID, provider, req)}
}

func (_c *MockBlobIndexLookup_Find_Call) Run(run func(ctx context.Context, contextID types.EncodedContextID, provider model.ProviderResult, req types.RetrievalRequest)) *MockBlobIndexLookup_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.EncodedContextID
		if args[1] != nil {
			arg1 = args[1].(types.EncodedContextID)
		}
		var arg2 model.ProviderResult
		if args[2] != nil {
			arg2 = args[2].(model.ProviderResult)
		}
		var arg3 types.RetrievalRequest
		if args[3] != nil {
			arg3 = args[3].(types.RetrievalRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockBlobIndexLookup_Find_Call) Return(shardedDagIndexView blobindex.ShardedDagIndexView, err error) *MockBlobIndexLookup_Find_Call {
	_c.Call.Return(shardedDagIndexView, err)
	return _c
}

func (_c *MockBlobIndexLookup_Find_Call) RunAndReturn(run func(ctx context.Context, contextID types.EncodedContextID, provider model.ProviderResult, req types.RetrievalRequest) (blobindex.ShardedDagIndexView, error)) *MockBlobIndexLookup_Find_Call {
	_c.Call.Return(run)
	return _c
}
