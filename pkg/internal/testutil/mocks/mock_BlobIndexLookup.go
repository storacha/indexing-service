// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	blobindex "github.com/storacha/indexing-service/pkg/blobindex"

	context "context"

	metadata "github.com/storacha/go-metadata"

	mock "github.com/stretchr/testify/mock"

	model "github.com/ipni/go-libipni/find/model"

	types "github.com/storacha/indexing-service/pkg/types"

	url "net/url"
)

// MockBlobIndexLookup is an autogenerated mock type for the BlobIndexLookup type
type MockBlobIndexLookup struct {
	mock.Mock
}

type MockBlobIndexLookup_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlobIndexLookup) EXPECT() *MockBlobIndexLookup_Expecter {
	return &MockBlobIndexLookup_Expecter{mock: &_m.Mock}
}

// Find provides a mock function with given fields: ctx, contextID, provider, fetchURL, rng
func (_m *MockBlobIndexLookup) Find(ctx context.Context, contextID types.EncodedContextID, provider model.ProviderResult, fetchURL *url.URL, rng *metadata.Range) (blobindex.ShardedDagIndexView, error) {
	ret := _m.Called(ctx, contextID, provider, fetchURL, rng)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 blobindex.ShardedDagIndexView
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.EncodedContextID, model.ProviderResult, *url.URL, *metadata.Range) (blobindex.ShardedDagIndexView, error)); ok {
		return rf(ctx, contextID, provider, fetchURL, rng)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.EncodedContextID, model.ProviderResult, *url.URL, *metadata.Range) blobindex.ShardedDagIndexView); ok {
		r0 = rf(ctx, contextID, provider, fetchURL, rng)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(blobindex.ShardedDagIndexView)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.EncodedContextID, model.ProviderResult, *url.URL, *metadata.Range) error); ok {
		r1 = rf(ctx, contextID, provider, fetchURL, rng)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlobIndexLookup_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockBlobIndexLookup_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - contextID types.EncodedContextID
//   - provider model.ProviderResult
//   - fetchURL *url.URL
//   - rng *metadata.Range
func (_e *MockBlobIndexLookup_Expecter) Find(ctx interface{}, contextID interface{}, provider interface{}, fetchURL interface{}, rng interface{}) *MockBlobIndexLookup_Find_Call {
	return &MockBlobIndexLookup_Find_Call{Call: _e.mock.On("Find", ctx, contextID, provider, fetchURL, rng)}
}

func (_c *MockBlobIndexLookup_Find_Call) Run(run func(ctx context.Context, contextID types.EncodedContextID, provider model.ProviderResult, fetchURL *url.URL, rng *metadata.Range)) *MockBlobIndexLookup_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.EncodedContextID), args[2].(model.ProviderResult), args[3].(*url.URL), args[4].(*metadata.Range))
	})
	return _c
}

func (_c *MockBlobIndexLookup_Find_Call) Return(_a0 blobindex.ShardedDagIndexView, _a1 error) *MockBlobIndexLookup_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlobIndexLookup_Find_Call) RunAndReturn(run func(context.Context, types.EncodedContextID, model.ProviderResult, *url.URL, *metadata.Range) (blobindex.ShardedDagIndexView, error)) *MockBlobIndexLookup_Find_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBlobIndexLookup creates a new instance of MockBlobIndexLookup. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlobIndexLookup(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlobIndexLookup {
	mock := &MockBlobIndexLookup{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
