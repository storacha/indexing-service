// Code generated by mockery v2.49.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockStore is an autogenerated mock type for the Store type
type MockStore[Key any, Value any] struct {
	mock.Mock
}

type MockStore_Expecter[Key any, Value any] struct {
	mock *mock.Mock
}

func (_m *MockStore[Key, Value]) EXPECT() *MockStore_Expecter[Key, Value] {
	return &MockStore_Expecter[Key, Value]{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, key
func (_m *MockStore[Key, Value]) Get(ctx context.Context, key Key) (Value, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 Value
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, Key) (Value, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, Key) Value); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Value)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, Key) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockStore_Get_Call[Key any, Value any] struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key Key
func (_e *MockStore_Expecter[Key, Value]) Get(ctx interface{}, key interface{}) *MockStore_Get_Call[Key, Value] {
	return &MockStore_Get_Call[Key, Value]{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *MockStore_Get_Call[Key, Value]) Run(run func(ctx context.Context, key Key)) *MockStore_Get_Call[Key, Value] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(Key))
	})
	return _c
}

func (_c *MockStore_Get_Call[Key, Value]) Return(_a0 Value, _a1 error) *MockStore_Get_Call[Key, Value] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_Get_Call[Key, Value]) RunAndReturn(run func(context.Context, Key) (Value, error)) *MockStore_Get_Call[Key, Value] {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: ctx, key, value
func (_m *MockStore[Key, Value]) Put(ctx context.Context, key Key, value Value) error {
	ret := _m.Called(ctx, key, value)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, Key, Value) error); ok {
		r0 = rf(ctx, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockStore_Put_Call[Key any, Value any] struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - ctx context.Context
//   - key Key
//   - value Value
func (_e *MockStore_Expecter[Key, Value]) Put(ctx interface{}, key interface{}, value interface{}) *MockStore_Put_Call[Key, Value] {
	return &MockStore_Put_Call[Key, Value]{Call: _e.mock.On("Put", ctx, key, value)}
}

func (_c *MockStore_Put_Call[Key, Value]) Run(run func(ctx context.Context, key Key, value Value)) *MockStore_Put_Call[Key, Value] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(Key), args[2].(Value))
	})
	return _c
}

func (_c *MockStore_Put_Call[Key, Value]) Return(_a0 error) *MockStore_Put_Call[Key, Value] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_Put_Call[Key, Value]) RunAndReturn(run func(context.Context, Key, Value) error) *MockStore_Put_Call[Key, Value] {
	_c.Call.Return(run)
	return _c
}

// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStore[Key any, Value any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStore[Key, Value] {
	mock := &MockStore[Key, Value]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
