// Code generated by mockery v2.51.1. DO NOT EDIT.

package extmocks

import (
	context "context"
	iter "iter"

	ipld "github.com/ipld/go-ipld-prime"

	metadata "github.com/ipni/go-libipni/metadata"

	mock "github.com/stretchr/testify/mock"

	multihash "github.com/multiformats/go-multihash"

	peer "github.com/libp2p/go-libp2p/core/peer"
)

// MockIpniPublisher is an autogenerated mock type for the Publisher type
type MockIpniPublisher struct {
	mock.Mock
}

type MockIpniPublisher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIpniPublisher) EXPECT() *MockIpniPublisher_Expecter {
	return &MockIpniPublisher_Expecter{mock: &_m.Mock}
}

// Publish provides a mock function with given fields: ctx, provider, contextID, digests, meta
func (_m *MockIpniPublisher) Publish(ctx context.Context, provider peer.AddrInfo, contextID string, digests iter.Seq[multihash.Multihash], meta metadata.Metadata) (ipld.Link, error) {
	ret := _m.Called(ctx, provider, contextID, digests, meta)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 ipld.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, peer.AddrInfo, string, iter.Seq[multihash.Multihash], metadata.Metadata) (ipld.Link, error)); ok {
		return rf(ctx, provider, contextID, digests, meta)
	}
	if rf, ok := ret.Get(0).(func(context.Context, peer.AddrInfo, string, iter.Seq[multihash.Multihash], metadata.Metadata) ipld.Link); ok {
		r0 = rf(ctx, provider, contextID, digests, meta)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ipld.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, peer.AddrInfo, string, iter.Seq[multihash.Multihash], metadata.Metadata) error); ok {
		r1 = rf(ctx, provider, contextID, digests, meta)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIpniPublisher_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockIpniPublisher_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - provider peer.AddrInfo
//   - contextID string
//   - digests iter.Seq[multihash.Multihash]
//   - meta metadata.Metadata
func (_e *MockIpniPublisher_Expecter) Publish(ctx interface{}, provider interface{}, contextID interface{}, digests interface{}, meta interface{}) *MockIpniPublisher_Publish_Call {
	return &MockIpniPublisher_Publish_Call{Call: _e.mock.On("Publish", ctx, provider, contextID, digests, meta)}
}

func (_c *MockIpniPublisher_Publish_Call) Run(run func(ctx context.Context, provider peer.AddrInfo, contextID string, digests iter.Seq[multihash.Multihash], meta metadata.Metadata)) *MockIpniPublisher_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(peer.AddrInfo), args[2].(string), args[3].(iter.Seq[multihash.Multihash]), args[4].(metadata.Metadata))
	})
	return _c
}

func (_c *MockIpniPublisher_Publish_Call) Return(_a0 ipld.Link, _a1 error) *MockIpniPublisher_Publish_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIpniPublisher_Publish_Call) RunAndReturn(run func(context.Context, peer.AddrInfo, string, iter.Seq[multihash.Multihash], metadata.Metadata) (ipld.Link, error)) *MockIpniPublisher_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIpniPublisher creates a new instance of MockIpniPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIpniPublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIpniPublisher {
	mock := &MockIpniPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
