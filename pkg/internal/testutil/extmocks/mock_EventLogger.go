// Code generated by mockery v2.53.4. DO NOT EDIT.

package extmocks

import (
	context "context"

	log "github.com/ipfs/go-log"

	mock "github.com/stretchr/testify/mock"
)

// MockEventLogger is an autogenerated mock type for the EventLogger type
type MockEventLogger struct {
	mock.Mock
}

type MockEventLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventLogger) EXPECT() *MockEventLogger_Expecter {
	return &MockEventLogger_Expecter{mock: &_m.Mock}
}

// Debug provides a mock function with given fields: args
func (_m *MockEventLogger) Debug(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockEventLogger_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type MockEventLogger_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - args ...interface{}
func (_e *MockEventLogger_Expecter) Debug(args ...interface{}) *MockEventLogger_Debug_Call {
	return &MockEventLogger_Debug_Call{Call: _e.mock.On("Debug",
		append([]interface{}{}, args...)...)}
}

func (_c *MockEventLogger_Debug_Call) Run(run func(args ...interface{})) *MockEventLogger_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockEventLogger_Debug_Call) Return() *MockEventLogger_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLogger_Debug_Call) RunAndReturn(run func(...interface{})) *MockEventLogger_Debug_Call {
	_c.Run(run)
	return _c
}

// Debugf provides a mock function with given fields: format, args
func (_m *MockEventLogger) Debugf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockEventLogger_Debugf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debugf'
type MockEventLogger_Debugf_Call struct {
	*mock.Call
}

// Debugf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockEventLogger_Expecter) Debugf(format interface{}, args ...interface{}) *MockEventLogger_Debugf_Call {
	return &MockEventLogger_Debugf_Call{Call: _e.mock.On("Debugf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockEventLogger_Debugf_Call) Run(run func(format string, args ...interface{})) *MockEventLogger_Debugf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockEventLogger_Debugf_Call) Return() *MockEventLogger_Debugf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLogger_Debugf_Call) RunAndReturn(run func(string, ...interface{})) *MockEventLogger_Debugf_Call {
	_c.Run(run)
	return _c
}

// Error provides a mock function with given fields: args
func (_m *MockEventLogger) Error(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockEventLogger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockEventLogger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - args ...interface{}
func (_e *MockEventLogger_Expecter) Error(args ...interface{}) *MockEventLogger_Error_Call {
	return &MockEventLogger_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{}, args...)...)}
}

func (_c *MockEventLogger_Error_Call) Run(run func(args ...interface{})) *MockEventLogger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockEventLogger_Error_Call) Return() *MockEventLogger_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLogger_Error_Call) RunAndReturn(run func(...interface{})) *MockEventLogger_Error_Call {
	_c.Run(run)
	return _c
}

// Errorf provides a mock function with given fields: format, args
func (_m *MockEventLogger) Errorf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockEventLogger_Errorf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Errorf'
type MockEventLogger_Errorf_Call struct {
	*mock.Call
}

// Errorf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockEventLogger_Expecter) Errorf(format interface{}, args ...interface{}) *MockEventLogger_Errorf_Call {
	return &MockEventLogger_Errorf_Call{Call: _e.mock.On("Errorf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockEventLogger_Errorf_Call) Run(run func(format string, args ...interface{})) *MockEventLogger_Errorf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockEventLogger_Errorf_Call) Return() *MockEventLogger_Errorf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLogger_Errorf_Call) RunAndReturn(run func(string, ...interface{})) *MockEventLogger_Errorf_Call {
	_c.Run(run)
	return _c
}

// Event provides a mock function with given fields: ctx, event, m
func (_m *MockEventLogger) Event(ctx context.Context, event string, m ...log.Loggable) {
	_va := make([]interface{}, len(m))
	for _i := range m {
		_va[_i] = m[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, event)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockEventLogger_Event_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Event'
type MockEventLogger_Event_Call struct {
	*mock.Call
}

// Event is a helper method to define mock.On call
//   - ctx context.Context
//   - event string
//   - m ...log.Loggable
func (_e *MockEventLogger_Expecter) Event(ctx interface{}, event interface{}, m ...interface{}) *MockEventLogger_Event_Call {
	return &MockEventLogger_Event_Call{Call: _e.mock.On("Event",
		append([]interface{}{ctx, event}, m...)...)}
}

func (_c *MockEventLogger_Event_Call) Run(run func(ctx context.Context, event string, m ...log.Loggable)) *MockEventLogger_Event_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]log.Loggable, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(log.Loggable)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockEventLogger_Event_Call) Return() *MockEventLogger_Event_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLogger_Event_Call) RunAndReturn(run func(context.Context, string, ...log.Loggable)) *MockEventLogger_Event_Call {
	_c.Run(run)
	return _c
}

// EventBegin provides a mock function with given fields: ctx, event, m
func (_m *MockEventLogger) EventBegin(ctx context.Context, event string, m ...log.Loggable) *log.EventInProgress {
	_va := make([]interface{}, len(m))
	for _i := range m {
		_va[_i] = m[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, event)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EventBegin")
	}

	var r0 *log.EventInProgress
	if rf, ok := ret.Get(0).(func(context.Context, string, ...log.Loggable) *log.EventInProgress); ok {
		r0 = rf(ctx, event, m...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*log.EventInProgress)
		}
	}

	return r0
}

// MockEventLogger_EventBegin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EventBegin'
type MockEventLogger_EventBegin_Call struct {
	*mock.Call
}

// EventBegin is a helper method to define mock.On call
//   - ctx context.Context
//   - event string
//   - m ...log.Loggable
func (_e *MockEventLogger_Expecter) EventBegin(ctx interface{}, event interface{}, m ...interface{}) *MockEventLogger_EventBegin_Call {
	return &MockEventLogger_EventBegin_Call{Call: _e.mock.On("EventBegin",
		append([]interface{}{ctx, event}, m...)...)}
}

func (_c *MockEventLogger_EventBegin_Call) Run(run func(ctx context.Context, event string, m ...log.Loggable)) *MockEventLogger_EventBegin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]log.Loggable, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(log.Loggable)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockEventLogger_EventBegin_Call) Return(_a0 *log.EventInProgress) *MockEventLogger_EventBegin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventLogger_EventBegin_Call) RunAndReturn(run func(context.Context, string, ...log.Loggable) *log.EventInProgress) *MockEventLogger_EventBegin_Call {
	_c.Call.Return(run)
	return _c
}

// Fatal provides a mock function with given fields: args
func (_m *MockEventLogger) Fatal(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockEventLogger_Fatal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatal'
type MockEventLogger_Fatal_Call struct {
	*mock.Call
}

// Fatal is a helper method to define mock.On call
//   - args ...interface{}
func (_e *MockEventLogger_Expecter) Fatal(args ...interface{}) *MockEventLogger_Fatal_Call {
	return &MockEventLogger_Fatal_Call{Call: _e.mock.On("Fatal",
		append([]interface{}{}, args...)...)}
}

func (_c *MockEventLogger_Fatal_Call) Run(run func(args ...interface{})) *MockEventLogger_Fatal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockEventLogger_Fatal_Call) Return() *MockEventLogger_Fatal_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLogger_Fatal_Call) RunAndReturn(run func(...interface{})) *MockEventLogger_Fatal_Call {
	_c.Run(run)
	return _c
}

// Fatalf provides a mock function with given fields: format, args
func (_m *MockEventLogger) Fatalf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockEventLogger_Fatalf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatalf'
type MockEventLogger_Fatalf_Call struct {
	*mock.Call
}

// Fatalf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockEventLogger_Expecter) Fatalf(format interface{}, args ...interface{}) *MockEventLogger_Fatalf_Call {
	return &MockEventLogger_Fatalf_Call{Call: _e.mock.On("Fatalf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockEventLogger_Fatalf_Call) Run(run func(format string, args ...interface{})) *MockEventLogger_Fatalf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockEventLogger_Fatalf_Call) Return() *MockEventLogger_Fatalf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLogger_Fatalf_Call) RunAndReturn(run func(string, ...interface{})) *MockEventLogger_Fatalf_Call {
	_c.Run(run)
	return _c
}

// Finish provides a mock function with given fields: ctx
func (_m *MockEventLogger) Finish(ctx context.Context) {
	_m.Called(ctx)
}

// MockEventLogger_Finish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Finish'
type MockEventLogger_Finish_Call struct {
	*mock.Call
}

// Finish is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockEventLogger_Expecter) Finish(ctx interface{}) *MockEventLogger_Finish_Call {
	return &MockEventLogger_Finish_Call{Call: _e.mock.On("Finish", ctx)}
}

func (_c *MockEventLogger_Finish_Call) Run(run func(ctx context.Context)) *MockEventLogger_Finish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockEventLogger_Finish_Call) Return() *MockEventLogger_Finish_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLogger_Finish_Call) RunAndReturn(run func(context.Context)) *MockEventLogger_Finish_Call {
	_c.Run(run)
	return _c
}

// FinishWithErr provides a mock function with given fields: ctx, err
func (_m *MockEventLogger) FinishWithErr(ctx context.Context, err error) {
	_m.Called(ctx, err)
}

// MockEventLogger_FinishWithErr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinishWithErr'
type MockEventLogger_FinishWithErr_Call struct {
	*mock.Call
}

// FinishWithErr is a helper method to define mock.On call
//   - ctx context.Context
//   - err error
func (_e *MockEventLogger_Expecter) FinishWithErr(ctx interface{}, err interface{}) *MockEventLogger_FinishWithErr_Call {
	return &MockEventLogger_FinishWithErr_Call{Call: _e.mock.On("FinishWithErr", ctx, err)}
}

func (_c *MockEventLogger_FinishWithErr_Call) Run(run func(ctx context.Context, err error)) *MockEventLogger_FinishWithErr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(error))
	})
	return _c
}

func (_c *MockEventLogger_FinishWithErr_Call) Return() *MockEventLogger_FinishWithErr_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLogger_FinishWithErr_Call) RunAndReturn(run func(context.Context, error)) *MockEventLogger_FinishWithErr_Call {
	_c.Run(run)
	return _c
}

// Info provides a mock function with given fields: args
func (_m *MockEventLogger) Info(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockEventLogger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockEventLogger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - args ...interface{}
func (_e *MockEventLogger_Expecter) Info(args ...interface{}) *MockEventLogger_Info_Call {
	return &MockEventLogger_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{}, args...)...)}
}

func (_c *MockEventLogger_Info_Call) Run(run func(args ...interface{})) *MockEventLogger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockEventLogger_Info_Call) Return() *MockEventLogger_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLogger_Info_Call) RunAndReturn(run func(...interface{})) *MockEventLogger_Info_Call {
	_c.Run(run)
	return _c
}

// Infof provides a mock function with given fields: format, args
func (_m *MockEventLogger) Infof(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockEventLogger_Infof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Infof'
type MockEventLogger_Infof_Call struct {
	*mock.Call
}

// Infof is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockEventLogger_Expecter) Infof(format interface{}, args ...interface{}) *MockEventLogger_Infof_Call {
	return &MockEventLogger_Infof_Call{Call: _e.mock.On("Infof",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockEventLogger_Infof_Call) Run(run func(format string, args ...interface{})) *MockEventLogger_Infof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockEventLogger_Infof_Call) Return() *MockEventLogger_Infof_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLogger_Infof_Call) RunAndReturn(run func(string, ...interface{})) *MockEventLogger_Infof_Call {
	_c.Run(run)
	return _c
}

// LogKV provides a mock function with given fields: ctx, alternatingKeyValues
func (_m *MockEventLogger) LogKV(ctx context.Context, alternatingKeyValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, alternatingKeyValues...)
	_m.Called(_ca...)
}

// MockEventLogger_LogKV_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogKV'
type MockEventLogger_LogKV_Call struct {
	*mock.Call
}

// LogKV is a helper method to define mock.On call
//   - ctx context.Context
//   - alternatingKeyValues ...interface{}
func (_e *MockEventLogger_Expecter) LogKV(ctx interface{}, alternatingKeyValues ...interface{}) *MockEventLogger_LogKV_Call {
	return &MockEventLogger_LogKV_Call{Call: _e.mock.On("LogKV",
		append([]interface{}{ctx}, alternatingKeyValues...)...)}
}

func (_c *MockEventLogger_LogKV_Call) Run(run func(ctx context.Context, alternatingKeyValues ...interface{})) *MockEventLogger_LogKV_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockEventLogger_LogKV_Call) Return() *MockEventLogger_LogKV_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLogger_LogKV_Call) RunAndReturn(run func(context.Context, ...interface{})) *MockEventLogger_LogKV_Call {
	_c.Run(run)
	return _c
}

// Panic provides a mock function with given fields: args
func (_m *MockEventLogger) Panic(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockEventLogger_Panic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Panic'
type MockEventLogger_Panic_Call struct {
	*mock.Call
}

// Panic is a helper method to define mock.On call
//   - args ...interface{}
func (_e *MockEventLogger_Expecter) Panic(args ...interface{}) *MockEventLogger_Panic_Call {
	return &MockEventLogger_Panic_Call{Call: _e.mock.On("Panic",
		append([]interface{}{}, args...)...)}
}

func (_c *MockEventLogger_Panic_Call) Run(run func(args ...interface{})) *MockEventLogger_Panic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockEventLogger_Panic_Call) Return() *MockEventLogger_Panic_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLogger_Panic_Call) RunAndReturn(run func(...interface{})) *MockEventLogger_Panic_Call {
	_c.Run(run)
	return _c
}

// Panicf provides a mock function with given fields: format, args
func (_m *MockEventLogger) Panicf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockEventLogger_Panicf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Panicf'
type MockEventLogger_Panicf_Call struct {
	*mock.Call
}

// Panicf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockEventLogger_Expecter) Panicf(format interface{}, args ...interface{}) *MockEventLogger_Panicf_Call {
	return &MockEventLogger_Panicf_Call{Call: _e.mock.On("Panicf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockEventLogger_Panicf_Call) Run(run func(format string, args ...interface{})) *MockEventLogger_Panicf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockEventLogger_Panicf_Call) Return() *MockEventLogger_Panicf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLogger_Panicf_Call) RunAndReturn(run func(string, ...interface{})) *MockEventLogger_Panicf_Call {
	_c.Run(run)
	return _c
}

// SerializeContext provides a mock function with given fields: ctx
func (_m *MockEventLogger) SerializeContext(ctx context.Context) ([]byte, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SerializeContext")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]byte, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []byte); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventLogger_SerializeContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SerializeContext'
type MockEventLogger_SerializeContext_Call struct {
	*mock.Call
}

// SerializeContext is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockEventLogger_Expecter) SerializeContext(ctx interface{}) *MockEventLogger_SerializeContext_Call {
	return &MockEventLogger_SerializeContext_Call{Call: _e.mock.On("SerializeContext", ctx)}
}

func (_c *MockEventLogger_SerializeContext_Call) Run(run func(ctx context.Context)) *MockEventLogger_SerializeContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockEventLogger_SerializeContext_Call) Return(_a0 []byte, _a1 error) *MockEventLogger_SerializeContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEventLogger_SerializeContext_Call) RunAndReturn(run func(context.Context) ([]byte, error)) *MockEventLogger_SerializeContext_Call {
	_c.Call.Return(run)
	return _c
}

// SetErr provides a mock function with given fields: ctx, err
func (_m *MockEventLogger) SetErr(ctx context.Context, err error) {
	_m.Called(ctx, err)
}

// MockEventLogger_SetErr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetErr'
type MockEventLogger_SetErr_Call struct {
	*mock.Call
}

// SetErr is a helper method to define mock.On call
//   - ctx context.Context
//   - err error
func (_e *MockEventLogger_Expecter) SetErr(ctx interface{}, err interface{}) *MockEventLogger_SetErr_Call {
	return &MockEventLogger_SetErr_Call{Call: _e.mock.On("SetErr", ctx, err)}
}

func (_c *MockEventLogger_SetErr_Call) Run(run func(ctx context.Context, err error)) *MockEventLogger_SetErr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(error))
	})
	return _c
}

func (_c *MockEventLogger_SetErr_Call) Return() *MockEventLogger_SetErr_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLogger_SetErr_Call) RunAndReturn(run func(context.Context, error)) *MockEventLogger_SetErr_Call {
	_c.Run(run)
	return _c
}

// SetTag provides a mock function with given fields: ctx, key, value
func (_m *MockEventLogger) SetTag(ctx context.Context, key string, value interface{}) {
	_m.Called(ctx, key, value)
}

// MockEventLogger_SetTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTag'
type MockEventLogger_SetTag_Call struct {
	*mock.Call
}

// SetTag is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value interface{}
func (_e *MockEventLogger_Expecter) SetTag(ctx interface{}, key interface{}, value interface{}) *MockEventLogger_SetTag_Call {
	return &MockEventLogger_SetTag_Call{Call: _e.mock.On("SetTag", ctx, key, value)}
}

func (_c *MockEventLogger_SetTag_Call) Run(run func(ctx context.Context, key string, value interface{})) *MockEventLogger_SetTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockEventLogger_SetTag_Call) Return() *MockEventLogger_SetTag_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLogger_SetTag_Call) RunAndReturn(run func(context.Context, string, interface{})) *MockEventLogger_SetTag_Call {
	_c.Run(run)
	return _c
}

// SetTags provides a mock function with given fields: ctx, tags
func (_m *MockEventLogger) SetTags(ctx context.Context, tags map[string]interface{}) {
	_m.Called(ctx, tags)
}

// MockEventLogger_SetTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTags'
type MockEventLogger_SetTags_Call struct {
	*mock.Call
}

// SetTags is a helper method to define mock.On call
//   - ctx context.Context
//   - tags map[string]interface{}
func (_e *MockEventLogger_Expecter) SetTags(ctx interface{}, tags interface{}) *MockEventLogger_SetTags_Call {
	return &MockEventLogger_SetTags_Call{Call: _e.mock.On("SetTags", ctx, tags)}
}

func (_c *MockEventLogger_SetTags_Call) Run(run func(ctx context.Context, tags map[string]interface{})) *MockEventLogger_SetTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *MockEventLogger_SetTags_Call) Return() *MockEventLogger_SetTags_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLogger_SetTags_Call) RunAndReturn(run func(context.Context, map[string]interface{})) *MockEventLogger_SetTags_Call {
	_c.Run(run)
	return _c
}

// Start provides a mock function with given fields: ctx, name
func (_m *MockEventLogger) Start(ctx context.Context, name string) context.Context {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context, string) context.Context); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// MockEventLogger_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockEventLogger_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockEventLogger_Expecter) Start(ctx interface{}, name interface{}) *MockEventLogger_Start_Call {
	return &MockEventLogger_Start_Call{Call: _e.mock.On("Start", ctx, name)}
}

func (_c *MockEventLogger_Start_Call) Run(run func(ctx context.Context, name string)) *MockEventLogger_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockEventLogger_Start_Call) Return(_a0 context.Context) *MockEventLogger_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventLogger_Start_Call) RunAndReturn(run func(context.Context, string) context.Context) *MockEventLogger_Start_Call {
	_c.Call.Return(run)
	return _c
}

// StartFromParentState provides a mock function with given fields: ctx, name, parent
func (_m *MockEventLogger) StartFromParentState(ctx context.Context, name string, parent []byte) (context.Context, error) {
	ret := _m.Called(ctx, name, parent)

	if len(ret) == 0 {
		panic("no return value specified for StartFromParentState")
	}

	var r0 context.Context
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) (context.Context, error)); ok {
		return rf(ctx, name, parent)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) context.Context); ok {
		r0 = rf(ctx, name, parent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []byte) error); ok {
		r1 = rf(ctx, name, parent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventLogger_StartFromParentState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartFromParentState'
type MockEventLogger_StartFromParentState_Call struct {
	*mock.Call
}

// StartFromParentState is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - parent []byte
func (_e *MockEventLogger_Expecter) StartFromParentState(ctx interface{}, name interface{}, parent interface{}) *MockEventLogger_StartFromParentState_Call {
	return &MockEventLogger_StartFromParentState_Call{Call: _e.mock.On("StartFromParentState", ctx, name, parent)}
}

func (_c *MockEventLogger_StartFromParentState_Call) Run(run func(ctx context.Context, name string, parent []byte)) *MockEventLogger_StartFromParentState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *MockEventLogger_StartFromParentState_Call) Return(_a0 context.Context, _a1 error) *MockEventLogger_StartFromParentState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEventLogger_StartFromParentState_Call) RunAndReturn(run func(context.Context, string, []byte) (context.Context, error)) *MockEventLogger_StartFromParentState_Call {
	_c.Call.Return(run)
	return _c
}

// Warn provides a mock function with given fields: args
func (_m *MockEventLogger) Warn(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockEventLogger_Warn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warn'
type MockEventLogger_Warn_Call struct {
	*mock.Call
}

// Warn is a helper method to define mock.On call
//   - args ...interface{}
func (_e *MockEventLogger_Expecter) Warn(args ...interface{}) *MockEventLogger_Warn_Call {
	return &MockEventLogger_Warn_Call{Call: _e.mock.On("Warn",
		append([]interface{}{}, args...)...)}
}

func (_c *MockEventLogger_Warn_Call) Run(run func(args ...interface{})) *MockEventLogger_Warn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockEventLogger_Warn_Call) Return() *MockEventLogger_Warn_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLogger_Warn_Call) RunAndReturn(run func(...interface{})) *MockEventLogger_Warn_Call {
	_c.Run(run)
	return _c
}

// Warnf provides a mock function with given fields: format, args
func (_m *MockEventLogger) Warnf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockEventLogger_Warnf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warnf'
type MockEventLogger_Warnf_Call struct {
	*mock.Call
}

// Warnf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockEventLogger_Expecter) Warnf(format interface{}, args ...interface{}) *MockEventLogger_Warnf_Call {
	return &MockEventLogger_Warnf_Call{Call: _e.mock.On("Warnf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockEventLogger_Warnf_Call) Run(run func(format string, args ...interface{})) *MockEventLogger_Warnf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockEventLogger_Warnf_Call) Return() *MockEventLogger_Warnf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLogger_Warnf_Call) RunAndReturn(run func(string, ...interface{})) *MockEventLogger_Warnf_Call {
	_c.Run(run)
	return _c
}

// Warning provides a mock function with given fields: args
func (_m *MockEventLogger) Warning(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockEventLogger_Warning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warning'
type MockEventLogger_Warning_Call struct {
	*mock.Call
}

// Warning is a helper method to define mock.On call
//   - args ...interface{}
func (_e *MockEventLogger_Expecter) Warning(args ...interface{}) *MockEventLogger_Warning_Call {
	return &MockEventLogger_Warning_Call{Call: _e.mock.On("Warning",
		append([]interface{}{}, args...)...)}
}

func (_c *MockEventLogger_Warning_Call) Run(run func(args ...interface{})) *MockEventLogger_Warning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockEventLogger_Warning_Call) Return() *MockEventLogger_Warning_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLogger_Warning_Call) RunAndReturn(run func(...interface{})) *MockEventLogger_Warning_Call {
	_c.Run(run)
	return _c
}

// Warningf provides a mock function with given fields: format, args
func (_m *MockEventLogger) Warningf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockEventLogger_Warningf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warningf'
type MockEventLogger_Warningf_Call struct {
	*mock.Call
}

// Warningf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockEventLogger_Expecter) Warningf(format interface{}, args ...interface{}) *MockEventLogger_Warningf_Call {
	return &MockEventLogger_Warningf_Call{Call: _e.mock.On("Warningf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockEventLogger_Warningf_Call) Run(run func(format string, args ...interface{})) *MockEventLogger_Warningf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockEventLogger_Warningf_Call) Return() *MockEventLogger_Warningf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLogger_Warningf_Call) RunAndReturn(run func(string, ...interface{})) *MockEventLogger_Warningf_Call {
	_c.Run(run)
	return _c
}

// NewMockEventLogger creates a new instance of MockEventLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventLogger {
	mock := &MockEventLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
