// Code generated by mockery v2.53.4. DO NOT EDIT.

package extmocks

import mock "github.com/stretchr/testify/mock"

// MockEventLogger is an autogenerated mock type for the EventLogger type
type MockEventLogger struct {
	mock.Mock
}

type MockEventLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventLogger) EXPECT() *MockEventLogger_Expecter {
	return &MockEventLogger_Expecter{mock: &_m.Mock}
}

// Debug provides a mock function with given fields: args
func (_m *MockEventLogger) Debug(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockEventLogger_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type MockEventLogger_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - args ...interface{}
func (_e *MockEventLogger_Expecter) Debug(args ...interface{}) *MockEventLogger_Debug_Call {
	return &MockEventLogger_Debug_Call{Call: _e.mock.On("Debug",
		append([]interface{}{}, args...)...)}
}

func (_c *MockEventLogger_Debug_Call) Run(run func(args ...interface{})) *MockEventLogger_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockEventLogger_Debug_Call) Return() *MockEventLogger_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLogger_Debug_Call) RunAndReturn(run func(...interface{})) *MockEventLogger_Debug_Call {
	_c.Run(run)
	return _c
}

// Debugf provides a mock function with given fields: format, args
func (_m *MockEventLogger) Debugf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockEventLogger_Debugf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debugf'
type MockEventLogger_Debugf_Call struct {
	*mock.Call
}

// Debugf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockEventLogger_Expecter) Debugf(format interface{}, args ...interface{}) *MockEventLogger_Debugf_Call {
	return &MockEventLogger_Debugf_Call{Call: _e.mock.On("Debugf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockEventLogger_Debugf_Call) Run(run func(format string, args ...interface{})) *MockEventLogger_Debugf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockEventLogger_Debugf_Call) Return() *MockEventLogger_Debugf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLogger_Debugf_Call) RunAndReturn(run func(string, ...interface{})) *MockEventLogger_Debugf_Call {
	_c.Run(run)
	return _c
}

// Error provides a mock function with given fields: args
func (_m *MockEventLogger) Error(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockEventLogger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockEventLogger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - args ...interface{}
func (_e *MockEventLogger_Expecter) Error(args ...interface{}) *MockEventLogger_Error_Call {
	return &MockEventLogger_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{}, args...)...)}
}

func (_c *MockEventLogger_Error_Call) Run(run func(args ...interface{})) *MockEventLogger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockEventLogger_Error_Call) Return() *MockEventLogger_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLogger_Error_Call) RunAndReturn(run func(...interface{})) *MockEventLogger_Error_Call {
	_c.Run(run)
	return _c
}

// Errorf provides a mock function with given fields: format, args
func (_m *MockEventLogger) Errorf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockEventLogger_Errorf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Errorf'
type MockEventLogger_Errorf_Call struct {
	*mock.Call
}

// Errorf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockEventLogger_Expecter) Errorf(format interface{}, args ...interface{}) *MockEventLogger_Errorf_Call {
	return &MockEventLogger_Errorf_Call{Call: _e.mock.On("Errorf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockEventLogger_Errorf_Call) Run(run func(format string, args ...interface{})) *MockEventLogger_Errorf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockEventLogger_Errorf_Call) Return() *MockEventLogger_Errorf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLogger_Errorf_Call) RunAndReturn(run func(string, ...interface{})) *MockEventLogger_Errorf_Call {
	_c.Run(run)
	return _c
}

// Fatal provides a mock function with given fields: args
func (_m *MockEventLogger) Fatal(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockEventLogger_Fatal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatal'
type MockEventLogger_Fatal_Call struct {
	*mock.Call
}

// Fatal is a helper method to define mock.On call
//   - args ...interface{}
func (_e *MockEventLogger_Expecter) Fatal(args ...interface{}) *MockEventLogger_Fatal_Call {
	return &MockEventLogger_Fatal_Call{Call: _e.mock.On("Fatal",
		append([]interface{}{}, args...)...)}
}

func (_c *MockEventLogger_Fatal_Call) Run(run func(args ...interface{})) *MockEventLogger_Fatal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockEventLogger_Fatal_Call) Return() *MockEventLogger_Fatal_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLogger_Fatal_Call) RunAndReturn(run func(...interface{})) *MockEventLogger_Fatal_Call {
	_c.Run(run)
	return _c
}

// Fatalf provides a mock function with given fields: format, args
func (_m *MockEventLogger) Fatalf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockEventLogger_Fatalf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatalf'
type MockEventLogger_Fatalf_Call struct {
	*mock.Call
}

// Fatalf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockEventLogger_Expecter) Fatalf(format interface{}, args ...interface{}) *MockEventLogger_Fatalf_Call {
	return &MockEventLogger_Fatalf_Call{Call: _e.mock.On("Fatalf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockEventLogger_Fatalf_Call) Run(run func(format string, args ...interface{})) *MockEventLogger_Fatalf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockEventLogger_Fatalf_Call) Return() *MockEventLogger_Fatalf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLogger_Fatalf_Call) RunAndReturn(run func(string, ...interface{})) *MockEventLogger_Fatalf_Call {
	_c.Run(run)
	return _c
}

// Info provides a mock function with given fields: args
func (_m *MockEventLogger) Info(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockEventLogger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockEventLogger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - args ...interface{}
func (_e *MockEventLogger_Expecter) Info(args ...interface{}) *MockEventLogger_Info_Call {
	return &MockEventLogger_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{}, args...)...)}
}

func (_c *MockEventLogger_Info_Call) Run(run func(args ...interface{})) *MockEventLogger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockEventLogger_Info_Call) Return() *MockEventLogger_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLogger_Info_Call) RunAndReturn(run func(...interface{})) *MockEventLogger_Info_Call {
	_c.Run(run)
	return _c
}

// Infof provides a mock function with given fields: format, args
func (_m *MockEventLogger) Infof(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockEventLogger_Infof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Infof'
type MockEventLogger_Infof_Call struct {
	*mock.Call
}

// Infof is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockEventLogger_Expecter) Infof(format interface{}, args ...interface{}) *MockEventLogger_Infof_Call {
	return &MockEventLogger_Infof_Call{Call: _e.mock.On("Infof",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockEventLogger_Infof_Call) Run(run func(format string, args ...interface{})) *MockEventLogger_Infof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockEventLogger_Infof_Call) Return() *MockEventLogger_Infof_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLogger_Infof_Call) RunAndReturn(run func(string, ...interface{})) *MockEventLogger_Infof_Call {
	_c.Run(run)
	return _c
}

// Panic provides a mock function with given fields: args
func (_m *MockEventLogger) Panic(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockEventLogger_Panic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Panic'
type MockEventLogger_Panic_Call struct {
	*mock.Call
}

// Panic is a helper method to define mock.On call
//   - args ...interface{}
func (_e *MockEventLogger_Expecter) Panic(args ...interface{}) *MockEventLogger_Panic_Call {
	return &MockEventLogger_Panic_Call{Call: _e.mock.On("Panic",
		append([]interface{}{}, args...)...)}
}

func (_c *MockEventLogger_Panic_Call) Run(run func(args ...interface{})) *MockEventLogger_Panic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockEventLogger_Panic_Call) Return() *MockEventLogger_Panic_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLogger_Panic_Call) RunAndReturn(run func(...interface{})) *MockEventLogger_Panic_Call {
	_c.Run(run)
	return _c
}

// Panicf provides a mock function with given fields: format, args
func (_m *MockEventLogger) Panicf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockEventLogger_Panicf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Panicf'
type MockEventLogger_Panicf_Call struct {
	*mock.Call
}

// Panicf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockEventLogger_Expecter) Panicf(format interface{}, args ...interface{}) *MockEventLogger_Panicf_Call {
	return &MockEventLogger_Panicf_Call{Call: _e.mock.On("Panicf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockEventLogger_Panicf_Call) Run(run func(format string, args ...interface{})) *MockEventLogger_Panicf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockEventLogger_Panicf_Call) Return() *MockEventLogger_Panicf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLogger_Panicf_Call) RunAndReturn(run func(string, ...interface{})) *MockEventLogger_Panicf_Call {
	_c.Run(run)
	return _c
}

// Warn provides a mock function with given fields: args
func (_m *MockEventLogger) Warn(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockEventLogger_Warn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warn'
type MockEventLogger_Warn_Call struct {
	*mock.Call
}

// Warn is a helper method to define mock.On call
//   - args ...interface{}
func (_e *MockEventLogger_Expecter) Warn(args ...interface{}) *MockEventLogger_Warn_Call {
	return &MockEventLogger_Warn_Call{Call: _e.mock.On("Warn",
		append([]interface{}{}, args...)...)}
}

func (_c *MockEventLogger_Warn_Call) Run(run func(args ...interface{})) *MockEventLogger_Warn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockEventLogger_Warn_Call) Return() *MockEventLogger_Warn_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLogger_Warn_Call) RunAndReturn(run func(...interface{})) *MockEventLogger_Warn_Call {
	_c.Run(run)
	return _c
}

// Warnf provides a mock function with given fields: format, args
func (_m *MockEventLogger) Warnf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockEventLogger_Warnf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warnf'
type MockEventLogger_Warnf_Call struct {
	*mock.Call
}

// Warnf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockEventLogger_Expecter) Warnf(format interface{}, args ...interface{}) *MockEventLogger_Warnf_Call {
	return &MockEventLogger_Warnf_Call{Call: _e.mock.On("Warnf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockEventLogger_Warnf_Call) Run(run func(format string, args ...interface{})) *MockEventLogger_Warnf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockEventLogger_Warnf_Call) Return() *MockEventLogger_Warnf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLogger_Warnf_Call) RunAndReturn(run func(string, ...interface{})) *MockEventLogger_Warnf_Call {
	_c.Run(run)
	return _c
}

// NewMockEventLogger creates a new instance of MockEventLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventLogger {
	mock := &MockEventLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
