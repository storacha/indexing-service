// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package extmocks

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/dynamodb"
	mock "github.com/stretchr/testify/mock"
)

// NewMockDynamoDBQueryClient creates a new instance of MockDynamoDBQueryClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDynamoDBQueryClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDynamoDBQueryClient {
	mock := &MockDynamoDBQueryClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDynamoDBQueryClient is an autogenerated mock type for the QueryAPIClient type
type MockDynamoDBQueryClient struct {
	mock.Mock
}

type MockDynamoDBQueryClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDynamoDBQueryClient) EXPECT() *MockDynamoDBQueryClient_Expecter {
	return &MockDynamoDBQueryClient_Expecter{mock: &_m.Mock}
}

// Query provides a mock function for the type MockDynamoDBQueryClient
func (_mock *MockDynamoDBQueryClient) Query(context1 context.Context, queryInput *dynamodb.QueryInput, fns ...func(*dynamodb.Options)) (*dynamodb.QueryOutput, error) {
	// func(*dynamodb.Options)
	_va := make([]interface{}, len(fns))
	for _i := range fns {
		_va[_i] = fns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, context1, queryInput)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 *dynamodb.QueryOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dynamodb.QueryInput, ...func(*dynamodb.Options)) (*dynamodb.QueryOutput, error)); ok {
		return returnFunc(context1, queryInput, fns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dynamodb.QueryInput, ...func(*dynamodb.Options)) *dynamodb.QueryOutput); ok {
		r0 = returnFunc(context1, queryInput, fns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.QueryOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *dynamodb.QueryInput, ...func(*dynamodb.Options)) error); ok {
		r1 = returnFunc(context1, queryInput, fns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDynamoDBQueryClient_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockDynamoDBQueryClient_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - context1 context.Context
//   - queryInput *dynamodb.QueryInput
//   - fns ...func(*dynamodb.Options)
func (_e *MockDynamoDBQueryClient_Expecter) Query(context1 interface{}, queryInput interface{}, fns ...interface{}) *MockDynamoDBQueryClient_Query_Call {
	return &MockDynamoDBQueryClient_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{context1, queryInput}, fns...)...)}
}

func (_c *MockDynamoDBQueryClient_Query_Call) Run(run func(context1 context.Context, queryInput *dynamodb.QueryInput, fns ...func(*dynamodb.Options))) *MockDynamoDBQueryClient_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dynamodb.QueryInput
		if args[1] != nil {
			arg1 = args[1].(*dynamodb.QueryInput)
		}
		var arg2 []func(*dynamodb.Options)
		variadicArgs := make([]func(*dynamodb.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*dynamodb.Options))
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockDynamoDBQueryClient_Query_Call) Return(queryOutput *dynamodb.QueryOutput, err error) *MockDynamoDBQueryClient_Query_Call {
	_c.Call.Return(queryOutput, err)
	return _c
}

func (_c *MockDynamoDBQueryClient_Query_Call) RunAndReturn(run func(context1 context.Context, queryInput *dynamodb.QueryInput, fns ...func(*dynamodb.Options)) (*dynamodb.QueryOutput, error)) *MockDynamoDBQueryClient_Query_Call {
	_c.Call.Return(run)
	return _c
}
