// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package extmocks

import (
	"context"
	"iter"

	"github.com/ipni/go-libipni/metadata"
	"github.com/libp2p/go-libp2p/core/peer"
	"github.com/multiformats/go-multihash"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIpniPublisher creates a new instance of MockIpniPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIpniPublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIpniPublisher {
	mock := &MockIpniPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIpniPublisher is an autogenerated mock type for the AsyncPublisher type
type MockIpniPublisher struct {
	mock.Mock
}

type MockIpniPublisher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIpniPublisher) EXPECT() *MockIpniPublisher_Expecter {
	return &MockIpniPublisher_Expecter{mock: &_m.Mock}
}

// Publish provides a mock function for the type MockIpniPublisher
func (_mock *MockIpniPublisher) Publish(ctx context.Context, provider peer.AddrInfo, contextID string, digests iter.Seq[multihash.Multihash], meta metadata.Metadata) error {
	ret := _mock.Called(ctx, provider, contextID, digests, meta)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, peer.AddrInfo, string, iter.Seq[multihash.Multihash], metadata.Metadata) error); ok {
		r0 = returnFunc(ctx, provider, contextID, digests, meta)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIpniPublisher_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockIpniPublisher_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - provider peer.AddrInfo
//   - contextID string
//   - digests iter.Seq[multihash.Multihash]
//   - meta metadata.Metadata
func (_e *MockIpniPublisher_Expecter) Publish(ctx interface{}, provider interface{}, contextID interface{}, digests interface{}, meta interface{}) *MockIpniPublisher_Publish_Call {
	return &MockIpniPublisher_Publish_Call{Call: _e.mock.On("Publish", ctx, provider, contextID, digests, meta)}
}

func (_c *MockIpniPublisher_Publish_Call) Run(run func(ctx context.Context, provider peer.AddrInfo, contextID string, digests iter.Seq[multihash.Multihash], meta metadata.Metadata)) *MockIpniPublisher_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 peer.AddrInfo
		if args[1] != nil {
			arg1 = args[1].(peer.AddrInfo)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 iter.Seq[multihash.Multihash]
		if args[3] != nil {
			arg3 = args[3].(iter.Seq[multihash.Multihash])
		}
		var arg4 metadata.Metadata
		if args[4] != nil {
			arg4 = args[4].(metadata.Metadata)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockIpniPublisher_Publish_Call) Return(err error) *MockIpniPublisher_Publish_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIpniPublisher_Publish_Call) RunAndReturn(run func(ctx context.Context, provider peer.AddrInfo, contextID string, digests iter.Seq[multihash.Multihash], meta metadata.Metadata) error) *MockIpniPublisher_Publish_Call {
	_c.Call.Return(run)
	return _c
}
