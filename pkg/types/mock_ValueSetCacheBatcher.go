// Code generated by mockery v2.53.4. DO NOT EDIT.

package types

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockValueSetCacheBatcher is an autogenerated mock type for the ValueSetCacheBatcher type
type MockValueSetCacheBatcher[Key any, Value any] struct {
	mock.Mock
}

type MockValueSetCacheBatcher_Expecter[Key any, Value any] struct {
	mock *mock.Mock
}

func (_m *MockValueSetCacheBatcher[Key, Value]) EXPECT() *MockValueSetCacheBatcher_Expecter[Key, Value] {
	return &MockValueSetCacheBatcher_Expecter[Key, Value]{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, key, values
func (_m *MockValueSetCacheBatcher[Key, Value]) Add(ctx context.Context, key Key, values ...Value) error {
	_va := make([]interface{}, len(values))
	for _i := range values {
		_va[_i] = values[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, Key, ...Value) error); ok {
		r0 = rf(ctx, key, values...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockValueSetCacheBatcher_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockValueSetCacheBatcher_Add_Call[Key any, Value any] struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - key Key
//   - values ...Value
func (_e *MockValueSetCacheBatcher_Expecter[Key, Value]) Add(ctx interface{}, key interface{}, values ...interface{}) *MockValueSetCacheBatcher_Add_Call[Key, Value] {
	return &MockValueSetCacheBatcher_Add_Call[Key, Value]{Call: _e.mock.On("Add",
		append([]interface{}{ctx, key}, values...)...)}
}

func (_c *MockValueSetCacheBatcher_Add_Call[Key, Value]) Run(run func(ctx context.Context, key Key, values ...Value)) *MockValueSetCacheBatcher_Add_Call[Key, Value] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]Value, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(Value)
			}
		}
		run(args[0].(context.Context), args[1].(Key), variadicArgs...)
	})
	return _c
}

func (_c *MockValueSetCacheBatcher_Add_Call[Key, Value]) Return(_a0 error) *MockValueSetCacheBatcher_Add_Call[Key, Value] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockValueSetCacheBatcher_Add_Call[Key, Value]) RunAndReturn(run func(context.Context, Key, ...Value) error) *MockValueSetCacheBatcher_Add_Call[Key, Value] {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function with given fields: ctx
func (_m *MockValueSetCacheBatcher[Key, Value]) Commit(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockValueSetCacheBatcher_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockValueSetCacheBatcher_Commit_Call[Key any, Value any] struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockValueSetCacheBatcher_Expecter[Key, Value]) Commit(ctx interface{}) *MockValueSetCacheBatcher_Commit_Call[Key, Value] {
	return &MockValueSetCacheBatcher_Commit_Call[Key, Value]{Call: _e.mock.On("Commit", ctx)}
}

func (_c *MockValueSetCacheBatcher_Commit_Call[Key, Value]) Run(run func(ctx context.Context)) *MockValueSetCacheBatcher_Commit_Call[Key, Value] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockValueSetCacheBatcher_Commit_Call[Key, Value]) Return(_a0 error) *MockValueSetCacheBatcher_Commit_Call[Key, Value] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockValueSetCacheBatcher_Commit_Call[Key, Value]) RunAndReturn(run func(context.Context) error) *MockValueSetCacheBatcher_Commit_Call[Key, Value] {
	_c.Call.Return(run)
	return _c
}

// SetExpirable provides a mock function with given fields: ctx, key, expires
func (_m *MockValueSetCacheBatcher[Key, Value]) SetExpirable(ctx context.Context, key Key, expires bool) error {
	ret := _m.Called(ctx, key, expires)

	if len(ret) == 0 {
		panic("no return value specified for SetExpirable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, Key, bool) error); ok {
		r0 = rf(ctx, key, expires)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockValueSetCacheBatcher_SetExpirable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetExpirable'
type MockValueSetCacheBatcher_SetExpirable_Call[Key any, Value any] struct {
	*mock.Call
}

// SetExpirable is a helper method to define mock.On call
//   - ctx context.Context
//   - key Key
//   - expires bool
func (_e *MockValueSetCacheBatcher_Expecter[Key, Value]) SetExpirable(ctx interface{}, key interface{}, expires interface{}) *MockValueSetCacheBatcher_SetExpirable_Call[Key, Value] {
	return &MockValueSetCacheBatcher_SetExpirable_Call[Key, Value]{Call: _e.mock.On("SetExpirable", ctx, key, expires)}
}

func (_c *MockValueSetCacheBatcher_SetExpirable_Call[Key, Value]) Run(run func(ctx context.Context, key Key, expires bool)) *MockValueSetCacheBatcher_SetExpirable_Call[Key, Value] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(Key), args[2].(bool))
	})
	return _c
}

func (_c *MockValueSetCacheBatcher_SetExpirable_Call[Key, Value]) Return(_a0 error) *MockValueSetCacheBatcher_SetExpirable_Call[Key, Value] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockValueSetCacheBatcher_SetExpirable_Call[Key, Value]) RunAndReturn(run func(context.Context, Key, bool) error) *MockValueSetCacheBatcher_SetExpirable_Call[Key, Value] {
	_c.Call.Return(run)
	return _c
}

// NewMockValueSetCacheBatcher creates a new instance of MockValueSetCacheBatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockValueSetCacheBatcher[Key any, Value any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockValueSetCacheBatcher[Key, Value] {
	mock := &MockValueSetCacheBatcher[Key, Value]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
