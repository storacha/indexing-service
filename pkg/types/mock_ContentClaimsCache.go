// Code generated by mockery v2.51.1. DO NOT EDIT.

package types

import (
	context "context"

	cid "github.com/ipfs/go-cid"

	delegation "github.com/storacha/go-ucanto/core/delegation"

	mock "github.com/stretchr/testify/mock"
)

// MockContentClaimsCache is an autogenerated mock type for the ContentClaimsCache type
type MockContentClaimsCache struct {
	mock.Mock
}

type MockContentClaimsCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockContentClaimsCache) EXPECT() *MockContentClaimsCache_Expecter {
	return &MockContentClaimsCache_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, key
func (_m *MockContentClaimsCache) Get(ctx context.Context, key cid.Cid) (delegation.Delegation, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 delegation.Delegation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cid.Cid) (delegation.Delegation, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cid.Cid) delegation.Delegation); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(delegation.Delegation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, cid.Cid) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContentClaimsCache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockContentClaimsCache_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key cid.Cid
func (_e *MockContentClaimsCache_Expecter) Get(ctx interface{}, key interface{}) *MockContentClaimsCache_Get_Call {
	return &MockContentClaimsCache_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *MockContentClaimsCache_Get_Call) Run(run func(ctx context.Context, key cid.Cid)) *MockContentClaimsCache_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cid.Cid))
	})
	return _c
}

func (_c *MockContentClaimsCache_Get_Call) Return(_a0 delegation.Delegation, _a1 error) *MockContentClaimsCache_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContentClaimsCache_Get_Call) RunAndReturn(run func(context.Context, cid.Cid) (delegation.Delegation, error)) *MockContentClaimsCache_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, key, value, expires
func (_m *MockContentClaimsCache) Set(ctx context.Context, key cid.Cid, value delegation.Delegation, expires bool) error {
	ret := _m.Called(ctx, key, value, expires)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, cid.Cid, delegation.Delegation, bool) error); ok {
		r0 = rf(ctx, key, value, expires)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContentClaimsCache_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockContentClaimsCache_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - key cid.Cid
//   - value delegation.Delegation
//   - expires bool
func (_e *MockContentClaimsCache_Expecter) Set(ctx interface{}, key interface{}, value interface{}, expires interface{}) *MockContentClaimsCache_Set_Call {
	return &MockContentClaimsCache_Set_Call{Call: _e.mock.On("Set", ctx, key, value, expires)}
}

func (_c *MockContentClaimsCache_Set_Call) Run(run func(ctx context.Context, key cid.Cid, value delegation.Delegation, expires bool)) *MockContentClaimsCache_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cid.Cid), args[2].(delegation.Delegation), args[3].(bool))
	})
	return _c
}

func (_c *MockContentClaimsCache_Set_Call) Return(_a0 error) *MockContentClaimsCache_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContentClaimsCache_Set_Call) RunAndReturn(run func(context.Context, cid.Cid, delegation.Delegation, bool) error) *MockContentClaimsCache_Set_Call {
	_c.Call.Return(run)
	return _c
}

// SetExpirable provides a mock function with given fields: ctx, key, expires
func (_m *MockContentClaimsCache) SetExpirable(ctx context.Context, key cid.Cid, expires bool) error {
	ret := _m.Called(ctx, key, expires)

	if len(ret) == 0 {
		panic("no return value specified for SetExpirable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, cid.Cid, bool) error); ok {
		r0 = rf(ctx, key, expires)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContentClaimsCache_SetExpirable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetExpirable'
type MockContentClaimsCache_SetExpirable_Call struct {
	*mock.Call
}

// SetExpirable is a helper method to define mock.On call
//   - ctx context.Context
//   - key cid.Cid
//   - expires bool
func (_e *MockContentClaimsCache_Expecter) SetExpirable(ctx interface{}, key interface{}, expires interface{}) *MockContentClaimsCache_SetExpirable_Call {
	return &MockContentClaimsCache_SetExpirable_Call{Call: _e.mock.On("SetExpirable", ctx, key, expires)}
}

func (_c *MockContentClaimsCache_SetExpirable_Call) Run(run func(ctx context.Context, key cid.Cid, expires bool)) *MockContentClaimsCache_SetExpirable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cid.Cid), args[2].(bool))
	})
	return _c
}

func (_c *MockContentClaimsCache_SetExpirable_Call) Return(_a0 error) *MockContentClaimsCache_SetExpirable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContentClaimsCache_SetExpirable_Call) RunAndReturn(run func(context.Context, cid.Cid, bool) error) *MockContentClaimsCache_SetExpirable_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockContentClaimsCache creates a new instance of MockContentClaimsCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockContentClaimsCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockContentClaimsCache {
	mock := &MockContentClaimsCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
