// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package types

import (
	"context"

	"github.com/storacha/go-ucanto/core/delegation"
	"github.com/storacha/go-ucanto/core/ipld"
	mock "github.com/stretchr/testify/mock"
)

// NewMockContentClaimsStore creates a new instance of MockContentClaimsStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockContentClaimsStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockContentClaimsStore {
	mock := &MockContentClaimsStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockContentClaimsStore is an autogenerated mock type for the ContentClaimsStore type
type MockContentClaimsStore struct {
	mock.Mock
}

type MockContentClaimsStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockContentClaimsStore) EXPECT() *MockContentClaimsStore_Expecter {
	return &MockContentClaimsStore_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type MockContentClaimsStore
func (_mock *MockContentClaimsStore) Get(ctx context.Context, key ipld.Link) (delegation.Delegation, error) {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 delegation.Delegation
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ipld.Link) (delegation.Delegation, error)); ok {
		return returnFunc(ctx, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ipld.Link) delegation.Delegation); ok {
		r0 = returnFunc(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(delegation.Delegation)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ipld.Link) error); ok {
		r1 = returnFunc(ctx, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockContentClaimsStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockContentClaimsStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key ipld.Link
func (_e *MockContentClaimsStore_Expecter) Get(ctx interface{}, key interface{}) *MockContentClaimsStore_Get_Call {
	return &MockContentClaimsStore_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *MockContentClaimsStore_Get_Call) Run(run func(ctx context.Context, key ipld.Link)) *MockContentClaimsStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 ipld.Link
		if args[1] != nil {
			arg1 = args[1].(ipld.Link)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockContentClaimsStore_Get_Call) Return(delegation1 delegation.Delegation, err error) *MockContentClaimsStore_Get_Call {
	_c.Call.Return(delegation1, err)
	return _c
}

func (_c *MockContentClaimsStore_Get_Call) RunAndReturn(run func(ctx context.Context, key ipld.Link) (delegation.Delegation, error)) *MockContentClaimsStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function for the type MockContentClaimsStore
func (_mock *MockContentClaimsStore) Put(ctx context.Context, key ipld.Link, value delegation.Delegation) error {
	ret := _mock.Called(ctx, key, value)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ipld.Link, delegation.Delegation) error); ok {
		r0 = returnFunc(ctx, key, value)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockContentClaimsStore_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockContentClaimsStore_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - ctx context.Context
//   - key ipld.Link
//   - value delegation.Delegation
func (_e *MockContentClaimsStore_Expecter) Put(ctx interface{}, key interface{}, value interface{}) *MockContentClaimsStore_Put_Call {
	return &MockContentClaimsStore_Put_Call{Call: _e.mock.On("Put", ctx, key, value)}
}

func (_c *MockContentClaimsStore_Put_Call) Run(run func(ctx context.Context, key ipld.Link, value delegation.Delegation)) *MockContentClaimsStore_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 ipld.Link
		if args[1] != nil {
			arg1 = args[1].(ipld.Link)
		}
		var arg2 delegation.Delegation
		if args[2] != nil {
			arg2 = args[2].(delegation.Delegation)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockContentClaimsStore_Put_Call) Return(err error) *MockContentClaimsStore_Put_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockContentClaimsStore_Put_Call) RunAndReturn(run func(ctx context.Context, key ipld.Link, value delegation.Delegation) error) *MockContentClaimsStore_Put_Call {
	_c.Call.Return(run)
	return _c
}
