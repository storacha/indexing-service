// Code generated by mockery v2.53.4. DO NOT EDIT.

package types

import (
	context "context"

	multicodec "github.com/multiformats/go-multicodec"
	mock "github.com/stretchr/testify/mock"

	multihash "github.com/multiformats/go-multihash"
)

// MockNoProviderStore is an autogenerated mock type for the NoProviderStore type
type MockNoProviderStore struct {
	mock.Mock
}

type MockNoProviderStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNoProviderStore) EXPECT() *MockNoProviderStore_Expecter {
	return &MockNoProviderStore_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, key, values
func (_m *MockNoProviderStore) Add(ctx context.Context, key multihash.Multihash, values ...multicodec.Code) (uint64, error) {
	_va := make([]interface{}, len(values))
	for _i := range values {
		_va[_i] = values[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, multihash.Multihash, ...multicodec.Code) (uint64, error)); ok {
		return rf(ctx, key, values...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, multihash.Multihash, ...multicodec.Code) uint64); ok {
		r0 = rf(ctx, key, values...)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, multihash.Multihash, ...multicodec.Code) error); ok {
		r1 = rf(ctx, key, values...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNoProviderStore_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockNoProviderStore_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - key multihash.Multihash
//   - values ...multicodec.Code
func (_e *MockNoProviderStore_Expecter) Add(ctx interface{}, key interface{}, values ...interface{}) *MockNoProviderStore_Add_Call {
	return &MockNoProviderStore_Add_Call{Call: _e.mock.On("Add",
		append([]interface{}{ctx, key}, values...)...)}
}

func (_c *MockNoProviderStore_Add_Call) Run(run func(ctx context.Context, key multihash.Multihash, values ...multicodec.Code)) *MockNoProviderStore_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]multicodec.Code, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(multicodec.Code)
			}
		}
		run(args[0].(context.Context), args[1].(multihash.Multihash), variadicArgs...)
	})
	return _c
}

func (_c *MockNoProviderStore_Add_Call) Return(_a0 uint64, _a1 error) *MockNoProviderStore_Add_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNoProviderStore_Add_Call) RunAndReturn(run func(context.Context, multihash.Multihash, ...multicodec.Code) (uint64, error)) *MockNoProviderStore_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Members provides a mock function with given fields: ctx, key
func (_m *MockNoProviderStore) Members(ctx context.Context, key multihash.Multihash) ([]multicodec.Code, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Members")
	}

	var r0 []multicodec.Code
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, multihash.Multihash) ([]multicodec.Code, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, multihash.Multihash) []multicodec.Code); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]multicodec.Code)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, multihash.Multihash) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNoProviderStore_Members_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Members'
type MockNoProviderStore_Members_Call struct {
	*mock.Call
}

// Members is a helper method to define mock.On call
//   - ctx context.Context
//   - key multihash.Multihash
func (_e *MockNoProviderStore_Expecter) Members(ctx interface{}, key interface{}) *MockNoProviderStore_Members_Call {
	return &MockNoProviderStore_Members_Call{Call: _e.mock.On("Members", ctx, key)}
}

func (_c *MockNoProviderStore_Members_Call) Run(run func(ctx context.Context, key multihash.Multihash)) *MockNoProviderStore_Members_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(multihash.Multihash))
	})
	return _c
}

func (_c *MockNoProviderStore_Members_Call) Return(_a0 []multicodec.Code, _a1 error) *MockNoProviderStore_Members_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNoProviderStore_Members_Call) RunAndReturn(run func(context.Context, multihash.Multihash) ([]multicodec.Code, error)) *MockNoProviderStore_Members_Call {
	_c.Call.Return(run)
	return _c
}

// SetExpirable provides a mock function with given fields: ctx, key, expires
func (_m *MockNoProviderStore) SetExpirable(ctx context.Context, key multihash.Multihash, expires bool) error {
	ret := _m.Called(ctx, key, expires)

	if len(ret) == 0 {
		panic("no return value specified for SetExpirable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, multihash.Multihash, bool) error); ok {
		r0 = rf(ctx, key, expires)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNoProviderStore_SetExpirable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetExpirable'
type MockNoProviderStore_SetExpirable_Call struct {
	*mock.Call
}

// SetExpirable is a helper method to define mock.On call
//   - ctx context.Context
//   - key multihash.Multihash
//   - expires bool
func (_e *MockNoProviderStore_Expecter) SetExpirable(ctx interface{}, key interface{}, expires interface{}) *MockNoProviderStore_SetExpirable_Call {
	return &MockNoProviderStore_SetExpirable_Call{Call: _e.mock.On("SetExpirable", ctx, key, expires)}
}

func (_c *MockNoProviderStore_SetExpirable_Call) Run(run func(ctx context.Context, key multihash.Multihash, expires bool)) *MockNoProviderStore_SetExpirable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(multihash.Multihash), args[2].(bool))
	})
	return _c
}

func (_c *MockNoProviderStore_SetExpirable_Call) Return(_a0 error) *MockNoProviderStore_SetExpirable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNoProviderStore_SetExpirable_Call) RunAndReturn(run func(context.Context, multihash.Multihash, bool) error) *MockNoProviderStore_SetExpirable_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNoProviderStore creates a new instance of MockNoProviderStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNoProviderStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNoProviderStore {
	mock := &MockNoProviderStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
